<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xize&#39;s CS184 Blog</title>
    <link>http://localhost:1313/Blog/</link>
    <description>Xize&#39;s CS184 Blog</description>
    <generator>Hugo 0.143.1 &amp; FixIt v0.3.17-8b402129</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 May 2025 00:09:00 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS184 Team17 Final Report</title>
      <link>http://localhost:1313/Blog/posts/184proj/</link>
      <pubDate>Fri, 02 May 2025 00:09:00 -0800</pubDate>
      <guid>http://localhost:1313/Blog/posts/184proj/</guid>
      <category domain="http://localhost:1313/Blog/categories/cs184/">CS184</category>
      <description>&lt;h2 id=&#34;team-17-report-sound-propagation-in-fluid-simulation&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Team 17 Report: Sound Propagation in Fluid Simulation&lt;/span&gt;&#xA;  &lt;a href=&#34;#team-17-report-sound-propagation-in-fluid-simulation&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://alexdwastaken.github.io/Blog/posts/184proj/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://alexdwastaken.github.io/Blog/posts/184proj/&lt;/a&gt;&#xA;&lt;strong&gt;Group members: Xize Duan, Allen Liu, Fangzhou Zhao, Phoenix Ye&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Please read the online version for the best experience.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;members-and-contribution&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Members and Contribution&lt;/span&gt;&#xA;  &lt;a href=&#34;#members-and-contribution&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Where we started: an empty project folder.&lt;/p&gt;&#xA;&lt;p&gt;Xize Duan: Main Algorithm / Python Prototyping&lt;/p&gt;&#xA;&lt;p&gt;Fangzhou Zhao: Algorithm Optimization&lt;/p&gt;&#xA;&lt;p&gt;Allen Liu: Algorithm Optimization&lt;/p&gt;&#xA;&lt;p&gt;Phoenix Ye: Visualization&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Abstract&lt;/span&gt;&#xA;  &lt;a href=&#34;#abstract&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;This project presents an integrated simulation system for modeling the propagation of sound waves through fluid environments. We developed a fluid simulation based on the Navier-Stokes equations alongside a wave equation solver, enabling us to study their mutual interactions. The sound source is modeled as a thin oscillating object that exerts force on the fluid, capturing how sound influences fluid motion. Conversely, fluid perturbations are incorporated into the wave simulation to reflect how fluid dynamics affect sound propagation. The entire algorithm is accelerated using Apple GPUs. The final system visualizes the velocity field, fluid pressure field, and sound pressure field, and is capable of reading WAV files and simulating how they would sound after traveling through a 2D fluid-filled box.&lt;/p&gt;&#xA;&lt;h2 id=&#34;technical-approach&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Technical Approach&lt;/span&gt;&#xA;  &lt;a href=&#34;#technical-approach&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;fluid-and-sound-simulation-xize-duan&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Fluid and sound simulation (Xize Duan)&lt;/span&gt;&#xA;  &lt;a href=&#34;#fluid-and-sound-simulation-xize-duan&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;For fluid simulation, we follow the implementation of the legendary paper &amp;ldquo;Stable Fluids&amp;rdquo; by Jos Stam (1999) and the blog “&lt;a href=&#34;https://shahriyarshahrabi.medium.com/gentle-introduction-to-fluid-simulation-for-programmers-and-technical-artists-7c0045c40bac&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Gentle Introduction to Realtime Fluid Simulation for Programmers and Technical Artists&lt;/a&gt;” by Shahriar Shahrabi. The idea is to realize the navier-stokes equation:&#xA;$$&#xA;\frac{\partial \mathbf{u}}{\partial t} + (\mathbf{u} \cdot \nabla)\mathbf{u} = -\frac{1}{\rho} \nabla p + \nu \nabla^2 \mathbf{u} + \mathbf{f}&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\nabla \cdot \mathbf{u} = 0&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;in a uniform fluid grid. They are solved on a uniform grid by breaking the update process into three main steps for the velocity field:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Diffuse&lt;/strong&gt; – Simulate viscosity by spreading velocity across neighboring cells.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt; – Enforce incompressibility by making the velocity field divergence-free.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Advect&lt;/strong&gt; – Move velocity along the current flow to simulate transport.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For the density (or scalar) field, we apply only diffuse and advect steps, as it does not require projection. We used the backward euler method for fluid simulation to enforce stability. Some steps require solving a sparse linear system (for example, when solving the possession equation for pressure), and we used a numerical method called Jacobi iteration to solve these.&lt;/p&gt;&#xA;&lt;p&gt;For sound simulation, we implemented the wave equation in a uniform grid. This is easier than what we have thought.&#xA;$$&#xA;\frac{\partial^2 u}{\partial t^2} = c^2 \nabla^2 u&#xA;$$&#xA;where $c$ is selected arbitrarily.&lt;/p&gt;&#xA;&lt;h3 id=&#34;how-fluid-and-sound-influence-each-other-xize-duan&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;How fluid and sound influence each other (Xize Duan)&lt;/span&gt;&#xA;  &lt;a href=&#34;#how-fluid-and-sound-influence-each-other-xize-duan&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;First, we need to think about how sound affects the fluid. We adopted the suggestions taken in the proposal feedback to simulate an oscillating object in the middle of the fluid. We selected a thin area of the fluid and exerted force based on F=ma, where a is calculated by sound sample rate and amplitude. We visualized the pressure change and “sonified” pressures at different points and made sure the simulation worked correctly.&lt;/p&gt;&#xA;&lt;p&gt;Then we need to think about how the fluid affects the sound. Through some research and help of LLMs, we found the key is to calculate what&amp;rsquo;s called the “pressure perturbation” which generates sound internally in a moving liquid. There are different ways like spatial filtering, temporal-spatial filtering, Helmholtz decomposition and so on, but we went with spatial filtering due to its simplicity (following Turbulence: the filtering approach by Germano, M.). The idea is to filter the fluid pressure field with a gaussian kernel, then subtract from the unfiltered kernel as the perturbation. We then incorporate the perturbation-generated sound back into the wave-equation based sound simulation.&lt;/p&gt;&#xA;&lt;h3 id=&#34;visualization-phoenix-ye&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Visualization (Phoenix Ye)&lt;/span&gt;&#xA;  &lt;a href=&#34;#visualization-phoenix-ye&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;We laid out four Matplotlib axes in a 2x2 grid and used &lt;em&gt;imshow&lt;/em&gt; to render the density, fluid pressure, and sound pressure field with fixed color maps and value ranges so that color scales remain consistent over time. The velocity field is drawn once with a quiver at a constant scale to avoid per-frame autoscaling. We created two smoothing buffers and in each update() call we advance the simulation, apply exponential smooth to the raw u,v arrays, and then call quiver.set_UVC() together with im.set_array(), pressure_im.set_array(), sound_im.set_array(), and fps_text.set_text() to refresh the visuals and a performance overlap (stay time, FPS, max velocity, gravity).&lt;/p&gt;&#xA;&lt;p&gt;Mouse-click and drag events are bound to callbacks that compute a Gaussian-falloff impulse centered on the click location and add it into the velocity fields, allowing interactive disturbance. Finally, FuncAnimation drives the whole animation by only redrawing the changed artists each frame.&lt;/p&gt;&#xA;&lt;h3 id=&#34;optimization-allen-liu-fangzhou-zhao&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Optimization (Allen Liu, Fangzhou Zhao)&lt;/span&gt;&#xA;  &lt;a href=&#34;#optimization-allen-liu-fangzhou-zhao&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;The problems we encountered in this project were more a matter of code performance than algorithmic difficulties. Our earliest versions of the code were built primarily in python, and each step of the simulation process exists in its own NumPy routine-advect.py, diffuse.py, and project.py, respectively. In addition, the Poisson solve for pressure was wrapped in a Numba decorator that asked the JIT to run the inner loops in compiled form. Because the grids were genuine numpy.ndarray objects, the interpreter still had to manage Python objects, acquire and release the Global Interpreter Lock, and jump in and out of C every time one stage handed its result to the next. These problems largely affected the performance of our code, especially in large grid sizes. In order to claw back our code performance, we tried 2 of the following optimization methods and came up with some performance improvements visualizations.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Porting the exact same logic to C++:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Optimization Implementation: Instead of two-dimensional NumPy arrays, we used a single std::vector&lt;float&gt; for each field and computed the one-dimensional offset with a tiny inline helper. All of the heavy double loops were preceded by an OpenMP pragma that collapses the two indices and lets the runtime parcel iterations out to the ten CPU cores of our M1 Pro. The algorithm, boundary handling and solver iteration count never changed; what did change was the cost per iteration.&lt;/li&gt;&#xA;&lt;li&gt;Performance Improvements: On the same 640 × 640 case the C++ build now delivers about 41 FPS, a 5.6-fold speed-up over Python, and it holds roughly 50 FPS at 512 × 512 where the pure-Python code is already well below the 20-frame mark.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Transfering the kernels to the GPU through Apple’s Metal API:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Optimization Implementation: Each phase becomes its own compute shader: a thread receives its grid coordinates from the GPU dispatch header, checks whether the cell is on the boundary, and then performs the same arithmetic the CPU loop used to do. The host code written in Objective-C++ allocates the velocity, pressure and density buffers once in shared memory, launches the appropriate shader, and repeats the launch twenty times when an iterative solution is required. With thousands of GPU lanes working in parallel, the frame time is dominated by a fixed kernel-launch overhead rather than by the size of the grid.&lt;/li&gt;&#xA;&lt;li&gt;Performance Improvements: As the red squares in the following figure 1 indicate, the Metal version stays near 80–90 FPS from 128 × 128 all the way to 640 × 640, which translates to a 10.9 × acceleration over Python and nearly 2 × over the multi-threaded C++ code on the largest test. Only on the tiniest mesh does the GPU fall slightly behind the CPU because the launch cost outweighs the scant arithmetic on so few cells.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Lessons Learned during the optimization process:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;For us, none of the members of our group were very familiar with optimization algorithms. In the process of completing the optimization part of this project, most of the content is the result of our continuous exploration. How to use OpenMP, how to port python programs to C++, and shader-related optimization logic were definitely some of the additional things we learned besides the fluid simulation algorithm. But more importantly, it also made us realize that in the process of completing an open project, there is a high probability that we will encounter problems that we never learned before and don&amp;rsquo;t know how to deal with, and how to deal with these contents outside of the course is the more meaningful thing that we have learned.&lt;/p&gt;&#xA;&lt;h2 id=&#34;results&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;videos&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Videos&lt;/span&gt;&#xA;  &lt;a href=&#34;#videos&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;We used google drive to host the videos. In case the videos went missing, please visit our backup link:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1g4kHaNwtah7mQglRQMfnQPFjXXyqgHAI?usp=share_link&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://drive.google.com/drive/folders/1g4kHaNwtah7mQglRQMfnQPFjXXyqgHAI?usp=share_link&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Fluid simulation only - Different density diffuse together&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1zEQvjM4EHcQ6nR_4Rmw-FLZvQQcEyhi6/preview&#34; width=&#34;640&#34; height=&#34;360&#34;&gt;&lt;/iframe&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Full simulation only - With a oscillating sound sorce in the middle and mouse interaction&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1c0CcOC0aApM5i4DSn9zuKmGoPZ3cF8N4/preview&#34; width=&#34;640&#34; height=&#34;360&#34;&gt;&lt;/iframe&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Sound simulation only - To demonestrate our wave equation works properly&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1TvQDxz7H5RuSBOihGQtz9GrvqcWFrygR/preview&#34; width=&#34;640&#34; height=&#34;360&#34;&gt;&lt;/iframe&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Full Simulation - Sound and fluid, everything together!&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;iframe src=&#34;https://drive.google.com/file/d/1ZxmWbSlN7DG4j1yE-zgPk_sW5x0I5SxQ/preview&#34; width=&#34;640&#34; height=&#34;360&#34;&gt;&lt;/iframe&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;audio&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Audio&lt;/span&gt;&#xA;  &lt;a href=&#34;#audio&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;DO NOT LISTEN WITH HEADPHONES ON!&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We are working with sound simulation - why not try to &amp;ldquo;sonify&amp;rdquo; the liquid pressure field and sound pressure field?&lt;/p&gt;&#xA;&lt;p&gt;(It turns out the simulation only preserve little low frequency detail and distorted all high frequency detail - we will explain why)&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Audio 1: &amp;ldquo;One Two Three Four Five&amp;rdquo;&lt;/strong&gt;  @ 48000Hz&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Original Audio&lt;/th&gt;&#xA;          &lt;th&gt;Liquid Pressure Field (Corresponds to the lower left graph in the full simulation above)&lt;/th&gt;&#xA;          &lt;th&gt;Sound Pressure Field (Corresponds to the lower right graph in the full simulation above)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/12345/egaudio.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/12345/output.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/12345/foutput.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;Audio 2: &amp;ldquo;This is team 17 from CS 184&amp;rdquo;&lt;/strong&gt; @ 48000Hz&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Original Audio&lt;/th&gt;&#xA;          &lt;th&gt;Liquid Pressure Field (Corresponds to the lower left graph in the full simulation above)&lt;/th&gt;&#xA;          &lt;th&gt;Sound Pressure Field (Corresponds to the lower right graph in the full simulation above)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/t17/t172.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/t17/output.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/t17/foutput.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;Audio 3: &amp;ldquo;Never gonna give you up (copyright strike-proof version) @ 44100Hz&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;So distorted that you can only hear the drums with reverb! If you turn up the volume and listen closely you can still hear a little bit of higher frequencies.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Original Audio&lt;/th&gt;&#xA;          &lt;th&gt;Liquid Pressure Field (Corresponds to the lower left graph in the full simulation above)&lt;/th&gt;&#xA;          &lt;th&gt;Sound Pressure Field (Corresponds to the lower right graph in the full simulation above)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Search &amp;ldquo;rickroll&amp;rdquo; on youtube.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/rkr/output.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;audio controls&gt;&lt;br/&gt;  &lt;source src=&#34;audios/rkr/foutput.wav&#34; type=&#34;audio/wav&#34;&gt;&lt;br/&gt;  Your browser does not support the audio element.&lt;br/&gt;&lt;/audio&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;optimization-performance&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Optimization Performance&lt;/span&gt;&#xA;  &lt;a href=&#34;#optimization-performance&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;We have to point out this optimization is &lt;strong&gt;only done on the calculations, not the visualizations&lt;/strong&gt;! We can run the pure simulation without visualization very efficiently, but we did not optimize the performance of matplotlib (which is not the goal in our original proposal - we focus on simultation, not rendering). The numbers in the graph below are measured with matplotlib off.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/184proj/index.assets/AD_4nXdF_TVlVIflmgLORZ-n7lS96iugcxnodCRUKoPHSJh02GkAC0RQ9b-M_Ezz5YtB7mnNNsqrYFEn3YwAQWvoHIJWxcTC9pt2vy51kCYbFBnewFzNF9fZLOD5EVzyLXY8_Uf-9yWZLQ.png&#34; alt=&#34;Performance Compatison&#34; srcset=&#34;http://localhost:1313/Blog/posts/184proj/index.assets/AD_4nXdF_TVlVIflmgLORZ-n7lS96iugcxnodCRUKoPHSJh02GkAC0RQ9b-M_Ezz5YtB7mnNNsqrYFEn3YwAQWvoHIJWxcTC9pt2vy51kCYbFBnewFzNF9fZLOD5EVzyLXY8_Uf-9yWZLQ.png?size=small, http://localhost:1313/Blog/posts/184proj/index.assets/AD_4nXdF_TVlVIflmgLORZ-n7lS96iugcxnodCRUKoPHSJh02GkAC0RQ9b-M_Ezz5YtB7mnNNsqrYFEn3YwAQWvoHIJWxcTC9pt2vy51kCYbFBnewFzNF9fZLOD5EVzyLXY8_Uf-9yWZLQ.png?size=medium 1.5x, http://localhost:1313/Blog/posts/184proj/index.assets/AD_4nXdF_TVlVIflmgLORZ-n7lS96iugcxnodCRUKoPHSJh02GkAC0RQ9b-M_Ezz5YtB7mnNNsqrYFEn3YwAQWvoHIJWxcTC9pt2vy51kCYbFBnewFzNF9fZLOD5EVzyLXY8_Uf-9yWZLQ.png?size=large 2x&#34; data-title=&#34;Performance Compatison&#34; style=&#34;--width: 1600px;--aspect-ratio: 1600 / 1280;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;discussion&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Discussion&lt;/span&gt;&#xA;  &lt;a href=&#34;#discussion&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;From the results, we can see the audio is very blurry, and almost all high-frequency info is lost or distorted. This is reasonable (and we did not realize this until we started experimenting) because the method in stable fluid naturally throws away high frequency information, and after incorporating into the sound field things only gets worse. Working on how to simulate higher-frequencies could be a future direction.&lt;/p&gt;&#xA;&lt;p&gt;Another drawback of our implementation is that we only used spatial information whan calculating the sound generated by the fluid, which is not very physically accurate. We know there are other methods that incorporate time-domain information, but we did not have time to implement everything. Working on better modeling fluid perturbation could be another future direction.&lt;/p&gt;&#xA;&lt;h2 id=&#34;conclusion&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&#xA;  &lt;a href=&#34;#conclusion&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this project, we successfully designed and implemented a coupled simulation system that models the bidirectional interaction between fluid dynamics and sound propagation. Starting from fundamental equations—the Navier-Stokes equations for fluids and the wave equation for sound—we created a working prototype capable of simulating, visualizing, and even “sonifying” the interplay between these two phenomena. Our efforts in optimization, including multi-threaded C++ and GPU acceleration via Apple’s Metal API, enabled real-time performance on high-resolution grids, making our simulations both interactive and informative. While our system does have limitations—most notably the loss of high-frequency detail and the simplified treatment of sound generation from fluid motion—it lays a strong foundation for future extensions in more physically accurate and higher-fidelity audio-fluid interaction modeling. Overall, this project not only deepened our understanding of simulation algorithms and GPU programming, but also taught us how to tackle interdisciplinary technical challenges beyond the classroom.&lt;/p&gt;&#xA;&lt;h2 id=&#34;acknowledgements&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Acknowledgements&lt;/span&gt;&#xA;  &lt;a href=&#34;#acknowledgements&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;LLMs like ChatGPT and Claude is involved in this project, including polishing language, suggesting directions and references and intepreting formulas. However, little code is written by LLMs. We take full responsibility for our work.&lt;/p&gt;&#xA;&lt;p&gt;The code is available upon request, although it&amp;rsquo;s a little bit messy!&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Never Gonne Give You Up&amp;rdquo; by Rick Astley is used only for scientific purposes in this project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-references&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Key References&lt;/span&gt;&#xA;  &lt;a href=&#34;#key-references&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;We did read a lot of blogs, but here are the major ones that we actually looked in-depth or actually used. We forgot to keep track of everything :(&lt;/p&gt;&#xA;&lt;p&gt;ChatGPT is involved on suggesting effective references and we used them to understant concepts more easily.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Stable Fluids&amp;rdquo; by Jos Stam (1999)&lt;/p&gt;&#xA;&lt;p&gt;“&lt;a href=&#34;https://shahriyarshahrabi.medium.com/gentle-introduction-to-fluid-simulation-for-programmers-and-technical-artists-7c0045c40bac&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Gentle Introduction to Realtime Fluid Simulation for Programmers and Technical Artists&lt;/a&gt;” by Shahriar Shahrabi&lt;/p&gt;&#xA;&lt;p&gt;Turbulence: the filtering approach by Germano, M.&lt;/p&gt;&#xA;&lt;p&gt;CS184 slides extra content on fluid simulation&lt;/p&gt;&#xA;&lt;p&gt;Wikipedia wave equation &lt;a href=&#34;https://en.wikipedia.org/wiki/Wave_equation&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://en.wikipedia.org/wiki/Wave_equation&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>CS184 HW4 Writeup</title>
      <link>http://localhost:1313/Blog/posts/189hw4/</link>
      <pubDate>Tue, 08 Apr 2025 00:05:27 -0800</pubDate>
      <guid>http://localhost:1313/Blog/posts/189hw4/</guid>
      <category domain="http://localhost:1313/Blog/categories/cs184/">CS184</category>
      <description>&lt;h2 id=&#34;homework-4-clothism&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Homework 4: Clothism&lt;/span&gt;&#xA;  &lt;a href=&#34;#homework-4-clothism&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://alexdwastaken.github.io/Blog/posts/189hw4/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://alexdwastaken.github.io/Blog/posts/189hw4/&lt;/a&gt;&#xA;&lt;strong&gt;Group members: Xize Duan, Phoenix Ye&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;overview&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Overview&lt;/span&gt;&#xA;  &lt;a href=&#34;#overview&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this project, we build a realistic cloth simulation from the ground up. First, we model the cloth as a mass-spring system, discretizing it into point masses and connecting them with structural, shearing, and bending springs (Part 1). Then, we implement numerical integration to animate these masses over time (Part 2) and handle collisions with both external objects (Part 3) and the cloth itself (Part 4). Finally, we apply various shading techniques (Part 5), including diffuse, texture, and displacement mapping, to achieve visually appealing renderings of the simulated cloth in real-time.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-1-masses-and-springs&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 1: Masses and Springs&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-1-masses-and-springs&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we build a grid of point masses connected by three types of springs (structural, shearing, and bending). This establishes the foundation for our cloth simulation.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Structural&lt;/strong&gt;: connects each mass to its immediate neighbor(s) horizontally or vertically.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shearing&lt;/strong&gt;: connects diagonally adjacent masses.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bending&lt;/strong&gt;: connects every other mass (two steps away) horizontally or vertically.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We populate &lt;code&gt;point_masses&lt;/code&gt; by creating &lt;code&gt;num_width_points * num_height_points&lt;/code&gt; masses:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If &lt;strong&gt;horizontal orientation&lt;/strong&gt;, set &lt;code&gt;y = 1.0&lt;/code&gt; and vary &lt;code&gt;(x,z)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;If &lt;strong&gt;vertical orientation&lt;/strong&gt;, vary &lt;code&gt;(x,y)&lt;/code&gt; and set a small random &lt;code&gt;z&lt;/code&gt; offset (between &lt;code&gt;-1/1000&lt;/code&gt; and &lt;code&gt;1/1000&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Each point mass is marked &lt;code&gt;pinned&lt;/code&gt; if its &lt;code&gt;(row, col)&lt;/code&gt; index is in the pinned list.&lt;br&gt;&#xA;Once all masses are in point_masses, we create:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Structural springs&lt;/strong&gt;, connecting each mass to &lt;code&gt;(r, c-1)&lt;/code&gt; &amp;amp; &lt;code&gt;(r-1, c)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shearing springs&lt;/strong&gt;, connecting diagonals &lt;code&gt;(r, c)&lt;/code&gt; to &lt;code&gt;(r-1, c-1)&lt;/code&gt; &amp;amp; &lt;code&gt;(r-1, c+1)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bending springs&lt;/strong&gt;, connecting &lt;code&gt;(r, c)&lt;/code&gt; to &lt;code&gt;(r, c-2)&lt;/code&gt; &amp;amp; &lt;code&gt;(r-2, c)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Below, we show the cloth in scene/pinned2.json from two viewing angles where you can clearly see the cloth wireframe to show the structure of our point masses and springs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.1.png&#34; alt=&#34;Pinned 2 Angle 1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.1.png?size=small, http://localhost:1313/Blog/posts/189hw4/part1/part1.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part1/part1.1.png?size=large 2x&#34; data-title=&#34;Pinned 2 Angle 1&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Pinned 2 Angle 1 depicting structure of point masses&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.2.png&#34; alt=&#34;Pinned 2 Angle 1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.2.png?size=small, http://localhost:1313/Blog/posts/189hw4/part1/part1.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part1/part1.2.png?size=large 2x&#34; data-title=&#34;Pinned 2 Angle 1&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Pinned 2 Angle 2 depicting structure of point masses (After cloth falls)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.3.png&#34; alt=&#34;Without any shearing constraints&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.3.png?size=small, http://localhost:1313/Blog/posts/189hw4/part1/part1.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part1/part1.3.png?size=large 2x&#34; data-title=&#34;Without any shearing constraints&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Without any shearing constraints&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.4.png&#34; alt=&#34;With only shearing constraints&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.4.png?size=small, http://localhost:1313/Blog/posts/189hw4/part1/part1.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part1/part1.4.png?size=large 2x&#34; data-title=&#34;With only shearing constraints&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;With only shearing constraints&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.5.png&#34; alt=&#34;With all constraints&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part1/part1.5.png?size=small, http://localhost:1313/Blog/posts/189hw4/part1/part1.5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part1/part1.5.png?size=large 2x&#34; data-title=&#34;With all constraints&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;With all constraints&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;part-2-simulation-via-numerical-integration&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 2: Simulation via Numerical Integration&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-2-simulation-via-numerical-integration&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 2, we animate the cloth over time by computing the forces on each point mass and then integrating to update their positions. We use:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;External forces&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Spring forces&lt;/strong&gt; (from structural, shearing, and bending springs)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Verlet integration&lt;/strong&gt; to determine new positions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Provot’s constraint&lt;/strong&gt; to limit spring over-stretching.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;At the start of each timestep, we reset each point mass’s &lt;code&gt;forces&lt;/code&gt; to zero. Then we:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Add external forces&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For each external acceleration in &lt;code&gt;external_accelerations&lt;/code&gt;, we apply $ F = m \times a $ to every point mass.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Add spring correction forces&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For each spring (if enabled by the current cloth parameters), we use Hooke’s law:&lt;br&gt;&#xA;${F}_{spring} = -k (|f{p_a} - f{p_b}| - L_0),\hat{d}$&#xA;where $\hat{d}$ is the unit direction from one mass to the other, $L_0$ is &lt;code&gt;rest_length&lt;/code&gt;, and $k$ is the spring constant.&lt;/li&gt;&#xA;&lt;li&gt;Bending springs are typically weaker, so we multiply $k$ by a smaller factor.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We use &lt;strong&gt;Verlet integration&lt;/strong&gt; to update positions. For each point mass:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If it’s &lt;strong&gt;pinned&lt;/strong&gt;, skip all updates (remain fixed).&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Otherwise, given the current acceleration $f{a} = f{F}/m$, and damping factor $d$, we do:&lt;/p&gt;&#xA;&lt;p&gt;$$f{x}_{new} = f{x}_{current}&#xA;+ (1 - d) (f{x}_{current} - f{x}_{previous})&#xA;+ f{a}  \Delta t^2&#xA;$$&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Store &lt;code&gt;current_position&lt;/code&gt; in &lt;code&gt;last_position&lt;/code&gt; after updating.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We interpret the &lt;strong&gt;damping&lt;/strong&gt; parameter as a percentage. For instance, if damping = 0.02 (2%), we use $1 - 0.02$ to slightly reduce the velocity term, simulating friction/energy loss.&lt;/p&gt;&#xA;&lt;p&gt;After integration, each spring is checked to ensure it’s not stretched beyond &lt;strong&gt;110%&lt;/strong&gt; of its rest length. If the distance between &lt;code&gt;pm_a&lt;/code&gt; and &lt;code&gt;pm_b&lt;/code&gt; exceeds $1.1 \times \text{restlength}$:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Compute the excess distance and direction.&lt;/li&gt;&#xA;&lt;li&gt;Correct half of it on each mass, unless one is pinned (then apply the entire correction to the other).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This prevents the cloth from being unnaturally stretched.&lt;/p&gt;&#xA;&lt;p&gt;To see the cloth’s behavior under different parameters, we tested:&lt;/p&gt;&#xA;&lt;h2 id=&#34;spring-constant&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;Spring Constant&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#spring-constant&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;We tested ks from 500 N/m to 50000N/m. At very low ks, the cloth is extremely loose and it strethes a lot and takes longer to settle into a shape. At very high ks, the cloth behaves more rigidly, barely deforms.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.1.png&#34; alt=&#34;KS = 500&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.1.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.1.png?size=large 2x&#34; data-title=&#34;KS = 500&#34; style=&#34;--width: 2472px;--aspect-ratio: 2472 / 1968;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with ks = 500 $N/m$&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.2.png&#34; alt=&#34;KS = 5000&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.2.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.2.png?size=large 2x&#34; data-title=&#34;KS = 5000&#34; style=&#34;--width: 2472px;--aspect-ratio: 2472 / 1968;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with ks = 5000 $N/m$&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.3.png&#34; alt=&#34;KS = 5000&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.3.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.3.png?size=large 2x&#34; data-title=&#34;KS = 5000&#34; style=&#34;--width: 2472px;--aspect-ratio: 2472 / 1968;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with ks = 50000 $N/m$&lt;/p&gt;&#xA;&lt;h2 id=&#34;density&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;Density&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#density&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;We tested density from 1 $g/cm^2$ to 50 $g/cm^2$. With higher density, the cloth is heavier and falls faster under gravity. Springs may stretch more, leading to larger displacements before settling.  With lower density, it yields a lighter cloth, drifting more gently and bouncing around in collisions.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.4.png&#34; alt=&#34;Density = 1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.4.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.4.png?size=large 2x&#34; data-title=&#34;Density = 1&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with a density of 1 $g/cm^2$&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.5.png&#34; alt=&#34;Density = 15&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.5.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.5.png?size=large 2x&#34; data-title=&#34;Density = 15&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with a density of 15 $g/cm^2$&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.6.png&#34; alt=&#34;Density = 50&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.6.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.6.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.6.png?size=large 2x&#34; data-title=&#34;Density = 50&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with a density of 50 $g/cm^2$&lt;/p&gt;&#xA;&lt;h2 id=&#34;damping&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;Damping&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#damping&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;We tested damping from 0.0% to 0.2%. With high damping, the cloth loses energy quickly, so it settles faster and doesn’t bounce much. With low damping, the cloth swings and bounces longer before coming to rest.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.7.png&#34; alt=&#34;Damping = 0&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.7.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.7.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.7.png?size=large 2x&#34; data-title=&#34;Damping = 0&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with damping set at 0.0%&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.8.png&#34; alt=&#34;Damping = 0.2&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.8.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.8.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.8.png?size=large 2x&#34; data-title=&#34;Damping = 0.2&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Cloth with damping set at 0.2%&lt;/p&gt;&#xA;&lt;h2 id=&#34;pinned-4&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;Pinned 4&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#pinned-4&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Below is a final resting shot of the cloth from &lt;code&gt;scene/pinned4.json&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.9.png&#34; alt=&#34;pinned4&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part2/part2.9.png?size=small, http://localhost:1313/Blog/posts/189hw4/part2/part2.9.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part2/part2.9.png?size=large 2x&#34; data-title=&#34;pinned4&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;part-3-handling-collisions-with-other-objects&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 3: Handling collisions with other objects&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-3-handling-collisions-with-other-objects&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 3, we extend our cloth simulation to collide with external primitives—in this case, &lt;strong&gt;spheres&lt;/strong&gt; and &lt;strong&gt;planes&lt;/strong&gt;. Whenever a point mass intersects or crosses these objects, we resolve the collision by “bumping” the point mass back outside the object’s surface. This prevents the cloth from passing through the object and allows it to drape realistically.&lt;/p&gt;&#xA;&lt;p&gt;To handle collisions with a &lt;strong&gt;sphere&lt;/strong&gt; of radius $r$ at center ${o}$:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Detection&lt;/strong&gt;:&lt;br&gt;&#xA;After each time step, we check whether a point mass $f{p}$ is within the sphere: $|{p} - {o}| &amp;lt; r$&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resolution&lt;/strong&gt;:&lt;br&gt;&#xA;We find the intersection/tangent point on the sphere surface and we then compute a correction vector from the point mass’s &lt;code&gt;last_position&lt;/code&gt; to ${t}$.  Finally, we update &lt;code&gt;position&lt;/code&gt;. By doing so, the point mass ends up exactly on the sphere’s surface (slightly adjusted by friction).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For Collision with &lt;strong&gt;Planes&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Detection&lt;/strong&gt;:&#xA;We check if the point mass moved from one side of the plane to the other between last and current position. If the dot products with the plane’s normal differ in sign, the point mass has crossed the plane.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resolution&lt;/strong&gt;:&#xA;We compute the intersection/tangent point $t$ where the segment crosses the plane.&#xA;Then we bump the point mass a small offset $ϵ$ above $t$ (in the plane’s normal direction) to avoid numerical issues.&#xA;Similar to the sphere, we use friction scaling $(1−f)$ when applying the correction vector.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;results&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Using scene/sphere.json, we pinned two corners of the cloth and dropped it onto the sphere. For Default ks = 5000, Cloth drapes over the sphere fairly stiffly but still shows some bending.&#xA;For Lower ks = 500, Cloth is much looser and sags more around the sphere. For Higher ks = 50000, Cloth appears almost rigid, hugging the sphere with minimal visible folds.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.1.png&#34; alt=&#34;collison ks = 500&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.1.png?size=small, http://localhost:1313/Blog/posts/189hw4/part3/part3.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part3/part3.1.png?size=large 2x&#34; data-title=&#34;collison ks = 500&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Collision with Sphere at ks = 500 N/m&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.2.png&#34; alt=&#34;collison ks = 5000&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.2.png?size=small, http://localhost:1313/Blog/posts/189hw4/part3/part3.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part3/part3.2.png?size=large 2x&#34; data-title=&#34;collison ks = 5000&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Collision with Sphere at ks = 5000 N/m&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.3.png&#34; alt=&#34;collison ks = 50000&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.3.png?size=small, http://localhost:1313/Blog/posts/189hw4/part3/part3.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part3/part3.3.png?size=large 2x&#34; data-title=&#34;collison ks = 50000&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Collision with Sphere at ks = 50000 N/m&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.4.png&#34; alt=&#34;Shaded cloth on plane&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part3/part3.4.png?size=small, http://localhost:1313/Blog/posts/189hw4/part3/part3.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part3/part3.4.png?size=large 2x&#34; data-title=&#34;Shaded cloth on plane&#34; style=&#34;--width: 2184px;--aspect-ratio: 2184 / 1792;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Shaded cloth on plane&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-4-handling-self-collisions&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 4: Handling self-collisions&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-4-handling-self-collisions&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 4, we address &lt;strong&gt;self-collisions&lt;/strong&gt;, enabling the cloth to fold on itself realistically rather than clipping or intersecting. We implement &lt;strong&gt;spatial hashing&lt;/strong&gt; to efficiently detect when point masses are too close, then apply corrective forces to keep them separated.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-spatial-hashing-approach&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. Spatial Hashing Approach&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-spatial-hashing-approach&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;hash_position(pos)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We partition the space into 3D boxes whose dimensions depend on &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and a chosen scale factor (commonly 3 × the spacing).&lt;/li&gt;&#xA;&lt;li&gt;We truncate the coordinates of &lt;code&gt;pos&lt;/code&gt; to find which box it belongs to and convert that box coordinate into a unique hash value (e.g., using a combination of x, y, z indices).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;build_spatial_map()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clear the map from previous frames.&lt;/li&gt;&#xA;&lt;li&gt;For every &lt;code&gt;PointMass&lt;/code&gt; in &lt;code&gt;point_masses&lt;/code&gt;, compute its hash key using &lt;code&gt;hash_position&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Insert a pointer to that point mass into the corresponding map bucket (an array or vector of &lt;code&gt;PointMass*&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;self_collide(pm)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For a given point mass &lt;code&gt;pm&lt;/code&gt;, look up its hash bucket in the map.&lt;/li&gt;&#xA;&lt;li&gt;For each candidate &lt;code&gt;other&lt;/code&gt; in that bucket:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Skip if &lt;code&gt;other == pm&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Check if the distance between &lt;code&gt;pm&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; is below &lt;code&gt;2 × thickness&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If yes, compute the correction vector to separate &lt;code&gt;pm&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Accumulate these correction vectors, then apply the average to &lt;code&gt;pm.position&lt;/code&gt;, scaled by &lt;code&gt;(1.0 / simulation_steps)&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This avoids sudden large jumps in a single time step.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Integrating with &lt;code&gt;simulate()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;After we do Part 2’s integration and collisions with other objects, we:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Call &lt;code&gt;build_spatial_map()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For each &lt;code&gt;PointMass&lt;/code&gt; (that is not pinned), call &lt;code&gt;self_collide(pm)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;This ensures cloth points repel each other if they become too close.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Below are &lt;strong&gt;three screenshots&lt;/strong&gt; of our cloth folding onto itself, captured at different stages of the simulation:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.1.png&#34; alt=&#34;Early Self-Collision&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.1.png?size=small, http://localhost:1313/Blog/posts/189hw4/part4/part4.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part4/part4.1.png?size=large 2x&#34; data-title=&#34;Early Self-Collision&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Early Self-Collision&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.2.png&#34; alt=&#34;Intermediate Folding&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.2.png?size=small, http://localhost:1313/Blog/posts/189hw4/part4/part4.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part4/part4.2.png?size=large 2x&#34; data-title=&#34;Intermediate Folding&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Intermediate Folding&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.3.png&#34; alt=&#34;Rest Collision&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.3.png?size=small, http://localhost:1313/Blog/posts/189hw4/part4/part4.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part4/part4.3.png?size=large 2x&#34; data-title=&#34;Rest Collision&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Rest Collision&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-parameter-experiments&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3. Parameter Experiments&lt;/span&gt;&#xA;  &lt;a href=&#34;#3-parameter-experiments&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;To see how &lt;strong&gt;density&lt;/strong&gt; and &lt;strong&gt;ks&lt;/strong&gt; affect folding:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Increasing Density&lt;/strong&gt;:  When heavier cloth falls faster, creating deeper folds or stretches. The self-collision hashing must respond more aggressively as more mass collides in a shorter time.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Decreasing ks&lt;/strong&gt;:  A looser cloth that sags more on itself, producing more pronounced folds. With self-collision, it keeps separated layers, though the folds are larger and floppier.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Increasing ks&lt;/strong&gt;:  A stiffer cloth that folds less dramatically. Self-collision corrections still prevent intersections, but the cloth more rigidly holds shape.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;High Density&lt;/strong&gt;&lt;br&gt;&#xA;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.4.png&#34; alt=&#34;High Density Fold&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.4.png?size=small, http://localhost:1313/Blog/posts/189hw4/part4/part4.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part4/part4.4.png?size=large 2x&#34; data-title=&#34;High Density Fold&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;High Density Fold&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Low ks&lt;/strong&gt;&lt;br&gt;&#xA;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.5.png&#34; alt=&#34;Low ks&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part4/part4.5.png?size=small, http://localhost:1313/Blog/posts/189hw4/part4/part4.5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part4/part4.5.png?size=large 2x&#34; data-title=&#34;Low ks&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Low ks&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;part-5-shaders&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 5: Shaders&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-5-shaders&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 5, we move from CPU-based rendering to &lt;strong&gt;real-time GPU shaders&lt;/strong&gt;, leveraging &lt;strong&gt;vertex shaders&lt;/strong&gt; (for geometry transforms) and &lt;strong&gt;fragment shaders&lt;/strong&gt; (for per-fragment lighting and material effects). We implement several key shading models: &lt;strong&gt;Diffuse Shading&lt;/strong&gt;, &lt;strong&gt;Blinn-Phong Shading&lt;/strong&gt;, &lt;strong&gt;Texture Mapping&lt;/strong&gt;, &lt;strong&gt;Bump &amp;amp; Displacement Mapping&lt;/strong&gt;, &lt;strong&gt;Mirror (Environment Mapped) Reflections&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Explanation of shader program&lt;/strong&gt;: A shader program is a small, specialized piece of code that runs on the GPU. It is typically composed of two main stages: Vertex Shader – Operates on each vertex in a 3D model. It can transform the vertex from model space to screen space (e.g., via model, view, and projection matrices) and compute any per-vertex data that want to pass along (like normals, UV coordinates, etc.). The vertex shader’s outputs are then interpolated across the surface of the triangle or polygon.&#xA;Fragment (Pixel) Shader – Runs on each fragment, which can think of as each pixel-sized piece of the drawn surface. It uses the interpolated data from the vertex shader (position, normal, UV) and calculates the final color of that fragment. By splitting work this way, the GPU can operate in parallel: first it processes each vertex, then “fills in” the space between vertices by interpolating and running the fragment shader for every pixel covered by the triangle. This pipeline allows real-time rendering with advanced lighting and material effects at interactive frame rates.&lt;/p&gt;&#xA;&lt;h2 id=&#34;blinn-phong-shading-model&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Blinn-Phong Shading Model&lt;/span&gt;&#xA;  &lt;a href=&#34;#blinn-phong-shading-model&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;The Blinn-Phong shading model is a more refined variant of the basic Phong reflection model. It breaks down reflected light into three main components: Ambient – A constant term, simulating indirect light bouncing around the scene. Diffuse – The “Lambertian” reflection that depends on the angle between the surface normal and the light direction. It makes surfaces appear brighter when they face the light and darker as they turn away. Specular – A highlight that simulates the mirror-like reflection on shiny surfaces. In Blinn-Phong, we compute a half-vector $h$ halfway between the view direction and the light direction. The specular term depends on $max(0,n⋅h)^p$, where $p$ is a “shininess” exponent controlling how sharp or wide the highlight is.&lt;/p&gt;&#xA;&lt;p&gt;Below are screenshots of ambient only, diffuse only, specular only and combined Blinn-Phong Model.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.1.png&#34; alt=&#34;Ambient&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.1.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.1.png?size=large 2x&#34; data-title=&#34;Ambient&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Ambient Only (ka = 1, kd = 0, ks = 0)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.2.png&#34; alt=&#34;Diffuse&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.2.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.2.png?size=large 2x&#34; data-title=&#34;Diffuse&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Diffuse Only (ka = 0, kd = 1, ks = 0)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.3.png&#34; alt=&#34;Specular&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.3.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.3.png?size=large 2x&#34; data-title=&#34;Specular&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Specular Only (ka = 0, kd = 0, ks = 0)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.4.png&#34; alt=&#34;Combined&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.4.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.4.png?size=large 2x&#34; data-title=&#34;Combined&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Combined (ka = 0.2, kd = 0.5, ks = 0)&lt;/p&gt;&#xA;&lt;h2 id=&#34;custom-texture&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Custom Texture&lt;/span&gt;&#xA;  &lt;a href=&#34;#custom-texture&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.5.png&#34; alt=&#34;Custom&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.5.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.5.png?size=large 2x&#34; data-title=&#34;Custom&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Custom Texture&lt;/p&gt;&#xA;&lt;h2 id=&#34;bump-and-displacement-maps&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;BUMP AND DISPLACEMENT MAPS&lt;/span&gt;&#xA;  &lt;a href=&#34;#bump-and-displacement-maps&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Bump.frag, we perturb normals at the fragment level:&#xA;Compute height differences $deltaU$, $deltaV$ from the height map.&#xA;Construct a local “bump” normal in tangent space, then transform it by the TBN matrix back to world space.&#xA;Use this modified normal in a Blinn-Phong-like lighting equation.&lt;/p&gt;&#xA;&lt;p&gt;Below are screenshots of bump mapping on the cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.6.png&#34; alt=&#34;Bump on cloth&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.6.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.6.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.6.png?size=large 2x&#34; data-title=&#34;Bump on cloth&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Bump on cloth&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.7.png&#34; alt=&#34;Bump on sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.7.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.7.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.7.png?size=large 2x&#34; data-title=&#34;Bump on sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Bump on sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.8.png&#34; alt=&#34;Bump on sphere on cloth&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.8.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.8.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.8.png?size=large 2x&#34; data-title=&#34;Bump on sphere on cloth&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Bump on sphere on cloth&lt;/p&gt;&#xA;&lt;p&gt;Below is a screenshot of displacement mapping on the sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.9.png&#34; alt=&#34;Displacement on sphere and cloth&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.9.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.9.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.9.png?size=large 2x&#34; data-title=&#34;Displacement on sphere and cloth&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Displacement on sphere and cloth&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.10.png&#34; alt=&#34;Displacement on cloth on sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.10.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.10.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.10.png?size=large 2x&#34; data-title=&#34;Displacement on cloth on sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Displacement on cloth on sphere&lt;/p&gt;&#xA;&lt;p&gt;In Displacement.vert, we actually move each vertex along its normal by an amount read from the height map: $p&amp;rsquo;=p+n×[h(uv)×u_height_scaling]$.&#xA;This changes the geometry, so higher mesh resolution (-o 128 -a 128) reveals more detail.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.11.png&#34; alt=&#34;Bump 16 on cloth and sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.11.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.11.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.11.png?size=large 2x&#34; data-title=&#34;Bump 16 on cloth and sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Bump(-o16 -a16) on cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.12.png&#34; alt=&#34;Bump 128 on cloth and sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.12.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.12.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.12.png?size=large 2x&#34; data-title=&#34;Bump 128 on cloth and sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Bump(-o128 -a128) on cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.13.png&#34; alt=&#34;Displacement 16 on cloth and sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.13.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.13.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.13.png?size=large 2x&#34; data-title=&#34;Displacement 16 on cloth and sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Displacement(-o16 -a16) on cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.14.png&#34; alt=&#34;Displacement 128 on cloth and sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.14.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.14.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.14.png?size=large 2x&#34; data-title=&#34;Displacement 128 on cloth and sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Displacement(-o128 -a128) on cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;Below is a screenshot of our mirror shader on the cloth and on the sphere.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.15.png&#34; alt=&#34;Mirror on cloth and sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.15.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.15.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.15.png?size=large 2x&#34; data-title=&#34;Mirror on cloth and sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Mirror on cloth and sphere&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.16.png&#34; alt=&#34;Mirror on cloth on sphere&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw4/part5/part5.16.png?size=small, http://localhost:1313/Blog/posts/189hw4/part5/part5.16.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw4/part5/part5.16.png?size=large 2x&#34; data-title=&#34;Mirror on cloth on sphere&#34; style=&#34;--width: 2272px;--aspect-ratio: 2272 / 1880;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;br&gt;&#xA;Mirror on cloth on sphere&lt;/p&gt;&#xA;&lt;h2 id=&#34;appendix&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Appendix&lt;/span&gt;&#xA;  &lt;a href=&#34;#appendix&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In completing this assignment, we utilized ChatGPT O1 for language refinement, grammar correction, and structural adjustments. Additionally, we used it to improve the clarity of Markdown formatting to ensure better organization and readability.&lt;/p&gt;&#xA;&lt;p&gt;Through this process, we gained a deeper understanding of Markdown formatting, including how to use headers, lists, and emphasis for clearer structuring. Moreover, we improved my ability to concisely express ideas, making our writing more precise and polished.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>CS184 HW3 Writeup</title>
      <link>http://localhost:1313/Blog/posts/189hw3/</link>
      <pubDate>Fri, 14 Mar 2025 00:05:27 -0800</pubDate>
      <guid>http://localhost:1313/Blog/posts/189hw3/</guid>
      <category domain="http://localhost:1313/Blog/categories/cs184/">CS184</category>
      <description>&lt;h2 id=&#34;cs184-homework-3-write-up&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;CS184 Homework 3 Write-Up&lt;/span&gt;&#xA;  &lt;a href=&#34;#cs184-homework-3-write-up&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://alexdwastaken.github.io/Blog/posts/189hw3/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://alexdwastaken.github.io/Blog/posts/189hw3/&lt;/a&gt;&#xA;&lt;strong&gt;Group members: Xize Duan, Phoenix Ye&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We used Claude 3.7 Sonnet for language polishing. The code and the body of the write up is completely written by us.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;overview&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Overview&lt;/span&gt;&#xA;  &lt;a href=&#34;#overview&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 1, We implemented ray generation and scene intersection, creating rays through pixels with random sampling, transforming between coordinate spaces, and developing intersection algorithms for triangles and spheres.&lt;/p&gt;&#xA;&lt;p&gt;In Part 2, We built a Bounding Volume Hierarchy (BVH) that accelerated ray-scene intersection by organizing geometry in a tree structure, reducing complexity from O(n) to O(log n) and dramatically improving render times.&lt;/p&gt;&#xA;&lt;p&gt;In Part 3, We implemented direct illumination with diffuse BSDFs and compared uniform hemisphere sampling with importance sampling, demonstrating that the latter produces cleaner images with better handling of light sources.&lt;/p&gt;&#xA;&lt;p&gt;In Part 4, We extended our renderer to simulate global illumination with multiple light bounces, implementing recursive ray tracing and Russian Roulette path termination to capture realistic light transport throughout scenes.&lt;/p&gt;&#xA;&lt;p&gt;In Part 5, We implemented adaptive sampling that varies sample count based on pixel variance, using statistical confidence intervals to allocate computational resources efficiently while maintaining image quality.&lt;/p&gt;&#xA;&lt;p&gt;Overall, we learned how to trace a ray, how to build a BVH and how to calculate illumination recursively. It&amp;rsquo;s a rewarding experience both in graphics and in C++.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part1-ray-generation-and-scene-intersection&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part1: Ray Generation and Scene Intersection&lt;/span&gt;&#xA;  &lt;a href=&#34;#part1-ray-generation-and-scene-intersection&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we generated rays according to the positions on the screen space, and did perspecive projections to transform these rays into camera space. We first generated pixel sample points on $(x, y) \in [0, w] \times [0, h]$ ,  and generated two randoms samples from $X, Y \sim\text{Unif}(0, 1)$, and eventually got random pixel samples $(x+X, y+Y)$. After that, we generate rays from the origin and test intersections along the rays.&lt;/p&gt;&#xA;&lt;p&gt;The first key is to distinguish the different space present in this case&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pixel space, image space, sensor space&lt;/strong&gt; and &lt;strong&gt;camera space&lt;/strong&gt; are different.&lt;/li&gt;&#xA;&lt;li&gt;By normalizing 2D &lt;strong&gt;pixel space&lt;/strong&gt;, we get the &lt;strong&gt;image spac&lt;/strong&gt;e.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;image space&lt;/strong&gt; can be transformed into the &lt;strong&gt;sensor space&lt;/strong&gt; by aliging the borders (since both are rectangular shapes). Specifically, (0, 0) goes to $(-\tan (0.5 \cdot hfov), -\tan(0.5.vhov))$ and $(1, 1)$ goes to $(\tan (0.5 \cdot hfov), \tan(0.5.vhov))$.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;sensor space&lt;/strong&gt; sits on $(0, 0, -1)$ of the &lt;strong&gt;camera space&lt;/strong&gt; and is perpendicular to $z$ direction. Appending (-1) to a new dimension of the sensor space gives the position of the point in camera space.&lt;/li&gt;&#xA;&lt;li&gt;A ray is casted from the origin to the &lt;strong&gt;camera space&lt;/strong&gt; sample point.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The second key is to cast rays, and properly set the ray up.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ray equation is $\vec o + t \vec d$, and to ensure the consistency of each ray, $\vec d$ has to be normalized! (a lot of bugs encountered!)&lt;/li&gt;&#xA;&lt;li&gt;There are two fields &lt;code&gt;ray.min_t&lt;/code&gt; &lt;code&gt;ray.max_t&lt;/code&gt;. These are used to determine where the ray stars and when it ends. This caused a lot of bugs.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;c2w&lt;/code&gt; matrix converts camera space to world space. We do not have to invert this! (a lot of bugs encountered!)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To test the triangle intersection, we adopt the algorithm proposed in class. A short idea is to obtain the intersection of the ray and the plane, and calculate the berycentric coordinates with respect to the triangle. The coordinates can be calculated by doing cross products (since the cross product of two edges equals to the area of the triangle created by the two edges, and we can obtain berycentric coordinates by area). If the berycentric coordinates $\alpha, \beta$ and $\gamma$ are all positive, then the point lies in the triangle. An detail of implementation is that we can use dot product of components to avoid re-calculating same things.&lt;/p&gt;&#xA;&lt;p&gt;To test the sphere intersection, we solved a quadratic function for &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;. The important thing is to &lt;strong&gt;set &lt;code&gt;ray.min_t&lt;/code&gt; &lt;code&gt;ray.max_t&lt;/code&gt; after every valid intersection!; If not, we cannot detect the occlusion relation of an object correctly&lt;/strong&gt;. Becuase we didn&amp;rsquo;t set the &lt;code&gt;t&lt;/code&gt; values correctly, the balls won&amp;rsquo;t render because triangle is tested last.&lt;/p&gt;&#xA;&lt;p&gt;Here are some of the example renders.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Example 1: Empty&lt;/th&gt;&#xA;          &lt;th&gt;Example 2: Spheres&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBempty.png&#34; alt=&#34;Part1_CBempty&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBempty.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBempty.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBempty.png?size=large 2x&#34; data-title=&#34;Part1_CBempty&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBspheres.png&#34; alt=&#34;Part1_CBspheres&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBspheres.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBspheres.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart1_CBspheres.png?size=large 2x&#34; data-title=&#34;Part1_CBspheres&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;part-2-bounding-volume-hierarchy&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 2: Bounding Volume Hierarchy&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-2-bounding-volume-hierarchy&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;BVH partitions the objects into different bounding boxes organized in a tree structure to accelerate ray-scene intersection, and it&amp;rsquo;s very useful in ray tracing because it shrinks the complexity from $O(n)$ to $O(\log n)$ with a good policy.&lt;/p&gt;&#xA;&lt;h3 id=&#34;construction&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Construction&lt;/span&gt;&#xA;  &lt;a href=&#34;#construction&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;In our implementation, bvh is seperated along the longest axis with median centroid. The first step is to determine whether the node is a leaf node by comparing the current &lt;code&gt;element_count&lt;/code&gt; with &lt;code&gt;max_leaf_size&lt;/code&gt;. If it already is, fill in &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; field and return directly.&lt;/p&gt;&#xA;&lt;p&gt;If the node is not a leaf node, then we find its median and partition accordingly (with a functional programming style!)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nth_element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitDim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Primitive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Primitive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;centroid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitDim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;centroid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitDim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This function partitions without sorting completely. After that, we create new BVH nodes and construct with the left half and right half, and link the new nodes to &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A detail here is about the inclusiveness of &amp;lsquo;start&amp;rsquo; and &amp;rsquo;end&amp;rsquo;. In our implementation, we have to use&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leftStart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leftEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rightStart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rightEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;mid&lt;/code&gt; presents two times instead of one &lt;code&gt;mid&lt;/code&gt; and one &lt;code&gt;mid++&lt;/code&gt;. We guess this is related to the implementation of iterators.&lt;/p&gt;&#xA;&lt;h3 id=&#34;intersection&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Intersection&lt;/span&gt;&#xA;  &lt;a href=&#34;#intersection&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Intersecting the bounding box is simple. We just record the last &amp;lsquo;in&amp;rsquo; time and first &amp;lsquo;out&amp;rsquo; time. If the &amp;lsquo;in&amp;rsquo; time is before &amp;lsquo;out&amp;rsquo; time, then a intersection is detected, and we can return accordingly.&lt;/p&gt;&#xA;&lt;p&gt;One of the function only asks us to test whether there is a intersection; to solve that, write a simple recursion: if it is a leaf node, simply test every object inside; if not, return &lt;code&gt;has_intersection(ray, node-&amp;gt;l) || has_intersection(ray, node-&amp;gt;r)&lt;/code&gt;. Another function asks us to record the hit position as well, in this case, just record the position in the &lt;code&gt;Intersection&lt;/code&gt; object is fine.&lt;/p&gt;&#xA;&lt;p&gt;We did not encounter any problem when realizing the intersection functions.&lt;/p&gt;&#xA;&lt;h3 id=&#34;results&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Here are some example images of large scenes with normal shading.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Dragon&lt;/th&gt;&#xA;          &lt;th&gt;Lucy&lt;/th&gt;&#xA;          &lt;th&gt;Maxplanck&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_dragon.png&#34; alt=&#34;Part2_dragon&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_dragon.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_dragon.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_dragon.png?size=large 2x&#34; data-title=&#34;Part2_dragon&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_lucy.png&#34; alt=&#34;Part2_lucy&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_lucy.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_lucy.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_lucy.png?size=large 2x&#34; data-title=&#34;Part2_lucy&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_maxplanck.png&#34; alt=&#34;Part2_maxplanck&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_maxplanck.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_maxplanck.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart2_maxplanck.png?size=large 2x&#34; data-title=&#34;Part2_maxplanck&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Here we analyze the rendering time with and without bvh. Here are the data:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Scene&lt;/th&gt;&#xA;          &lt;th&gt;Primitives&lt;/th&gt;&#xA;          &lt;th&gt;Without BVH (Render)&lt;/th&gt;&#xA;          &lt;th&gt;With BVH (Render + Build BVH)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Gems&lt;/td&gt;&#xA;          &lt;td&gt;252&lt;/td&gt;&#xA;          &lt;td&gt;12.4182s&lt;/td&gt;&#xA;          &lt;td&gt;0.2220s+0.0001s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Empty&lt;/td&gt;&#xA;          &lt;td&gt;12&lt;/td&gt;&#xA;          &lt;td&gt;0.5307s&lt;/td&gt;&#xA;          &lt;td&gt;0.1796s + 0.0000s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Cow&lt;/td&gt;&#xA;          &lt;td&gt;5856&lt;/td&gt;&#xA;          &lt;td&gt;80.9856s&lt;/td&gt;&#xA;          &lt;td&gt;0.0888s+0.0036s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Bunny&lt;/td&gt;&#xA;          &lt;td&gt;28588&lt;/td&gt;&#xA;          &lt;td&gt;Stuck&lt;/td&gt;&#xA;          &lt;td&gt;0.1170s+0.3080s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;The results demonstrate the significant impact of BVH acceleration on rendering performance. Without BVH, rendering times increase dramatically with scene complexity, with the Bunny scene failing to complete due to excessive computations. In contrast, BVH-based rendering consistently achieves great speedups, reducing rendering times by orders of magnitude. Even when factoring in BVH construction time, the total cost remains negligible. For example, in the Cow scene, rendering time drops from 80.99s to just 0.0888s, while BVH construction takes only 0.0036s. This highlights BVH&amp;rsquo;s effectiveness in reducing ray intersection tests and optimizing traversal, making it indispensable for efficient ray tracing in complex scenes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-3-direct-illumination&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 3: Direct Illumination&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-3-direct-illumination&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we will start simulating light transport in the scene, and render images with realistic shading. We walked through implementing BSDF, zero bounce illumination and one bounce illumination. We also compared uniform hemisphere sampling with direct importance sampling.&lt;/p&gt;&#xA;&lt;h3 id=&#34;bsdf&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;BSDF&lt;/span&gt;&#xA;  &lt;a href=&#34;#bsdf&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;To implement diffuse BSDF, we only need to plug the reflectance into the formula. We attatch the code, which should be self-explanatory.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DiffuseBSDF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reflectance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DiffuseBSDF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sampler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;zero-bounce&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Zero Bounce&lt;/span&gt;&#xA;  &lt;a href=&#34;#zero-bounce&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;This part is equally simple once we figured out how to get light: get BSDF from the &lt;code&gt;Intersection&lt;/code&gt; object, and get emission by calling &lt;code&gt;get_emission()&lt;/code&gt; from the BSDF.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PathTracer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zero_bounce_radiance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                          &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intersection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bsdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_emission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;one-bounce-with-uniform-hemisphere-sampling&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;One Bounce with Uniform Hemisphere Sampling&lt;/span&gt;&#xA;  &lt;a href=&#34;#one-bounce-with-uniform-hemisphere-sampling&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;We looped through &lt;code&gt;num_samples&lt;/code&gt; to create monte carlo estimate according to the illumination psudocode from the lecture.&lt;/p&gt;&#xA;&lt;p&gt;We want to particularly highlight how the coordinate transformation works. When getting sample from &lt;code&gt;hemisphereSampler-&amp;gt;get_sample()&lt;/code&gt;, what we have is a local coordinate, and what we have to do is to conver it to global coordinate by &lt;code&gt;o2w&lt;/code&gt;. After that, we cast ray and obtain emission and probability. Note that $\cos \theta$ can be directly computed by the $z$ coordinate of the local coordinate system. After that, normalize by $\frac{2\pi}{\text{samples}}$ .&lt;/p&gt;&#xA;&lt;p&gt;A detail is to set &lt;code&gt;sample_ray.min_t = EPS_D&lt;/code&gt;. This is to prevent floating point error, where the light intersects the surface itself. We attach the key part of the code here:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bvh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intersect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample_ray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;light_isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;light_isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bsdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_emission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bsdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos_theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// wi is already in local coordinates where N = (0,0,1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;L_out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos_theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;one-bounce-with-importance-sampling&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;One Bounce with Importance Sampling&lt;/span&gt;&#xA;  &lt;a href=&#34;#one-bounce-with-importance-sampling&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Instead of uniformly sampling all possible directions, importance sampling strategically samples based on the probability distribution of the light sources or the BSDF, reducing noise and improving convergence. We explain how this works by comparing with uniform hemisphere sampling.&lt;/p&gt;&#xA;&lt;p&gt;The key difference between the two methods lies in how samples are chosen. In direct hemisphere sampling, the algorithm selects random directions uniformly over the hemisphere above the surface. This approach does not consider whether the sampled directions actually lead to light sources, leading to many unnecessary samples. In contrast, importance sampling directly selects sample directions based on the distribution of light sources (&lt;code&gt;L_i = light-&amp;gt;sample_L(hit_p, &amp;amp;wi, &amp;amp;distToLight, &amp;amp;pdf)&lt;/code&gt;). By sampling only directions that contribute significantly to illumination, importance sampling reduces variance and improves efficiency. Also, importance sampling uses the idea of &amp;ldquo;shadow rays&amp;rdquo;, as the rays that do not reach the light source is equivalent to the ray is in the shadow.&lt;/p&gt;&#xA;&lt;p&gt;Since direct hemisphere sampling distributes samples uniformly, it normalizes the accumulated radiance by multiplying by $\frac{2\pi}{\text{samples}}$, assuming an even distribution. However, importance sampling assigns each sample a probability density function (PDF) based on the likelihood of choosing that direction. This allows the algorithm to correctly weigh contributions, ensuring that the results remain unbiased while achieving faster convergence with fewer samples. &lt;strong&gt;Note that we do not re-normalize by 2$\pi$ again as the PDF already tells us the probability! (A lot of bugs encountered by adding unecessary normalization!)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Also, note that delta light only needs to be handled once. Delta light will almost never be sampled in uniform hemisphere sampling but is supported with importanc sampling.&lt;/p&gt;&#xA;&lt;p&gt;Here are the key part of the code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bvh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intersect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_ray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shadow_isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bsdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wi_local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos_theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wi_local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Add contribution if cos_theta is positive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cos_theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;L_out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos_theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;samples&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;results-1&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results-1&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Here are some samples rendered with both implementations.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Bunny&lt;/th&gt;&#xA;          &lt;th&gt;Balls&lt;/th&gt;&#xA;          &lt;th&gt;Bench (Point light, not supported by uniform sampling)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Uniform&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny-H.png&#34; alt=&#34;Part3_Showoff_CBbunny-H&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny-H.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny-H.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny-H.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_CBbunny-H&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian-H.png&#34; alt=&#34;Part3_Showoff_CBspheres_lambertian-H&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian-H.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian-H.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian-H.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_CBspheres_lambertian-H&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench-H-ns.png&#34; alt=&#34;Part3_Showoff_bench-H-ns&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench-H-ns.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench-H-ns.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench-H-ns.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_bench-H-ns&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Importance&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny.png&#34; alt=&#34;Part3_Showoff_CBbunny&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBbunny.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_CBbunny&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian.png&#34; alt=&#34;Part3_Showoff_CBspheres_lambertian&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_CBspheres_lambertian.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_CBspheres_lambertian&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench.png&#34; alt=&#34;Part3_Showoff_bench&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Showoff_bench.png?size=large 2x&#34; data-title=&#34;Part3_Showoff_bench&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Here is one particular scene with at least one area light and compare the noise levels in soft shadows when rendering with 1, 4, 16, and 64 light rays. We can see that as the light rays goes up, the noise level goes down even we are still using one sample per pixel.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Light Rays&lt;/th&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;4&lt;/th&gt;&#xA;          &lt;th&gt;16&lt;/th&gt;&#xA;          &lt;th&gt;64&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Results&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_1.png&#34; alt=&#34;Part3_Complight_CBbunny_l_1&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_1.png?size=large 2x&#34; data-title=&#34;Part3_Complight_CBbunny_l_1&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_4.png&#34; alt=&#34;Part3_Complight_CBbunny_l_4&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_4.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_4.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_4.png?size=large 2x&#34; data-title=&#34;Part3_Complight_CBbunny_l_4&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_16.png&#34; alt=&#34;Part3_Complight_CBbunny_l_16&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_16.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_16.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_16.png?size=large 2x&#34; data-title=&#34;Part3_Complight_CBbunny_l_16&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_64.png&#34; alt=&#34;Part3_Complight_CBbunny_l_64&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_64.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_64.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart3_Complight_CBbunny_l_64.png?size=large 2x&#34; data-title=&#34;Part3_Complight_CBbunny_l_64&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Here we provide a short analysis between uniform hemisphere sampling and lighting sampling. In the uniform hemisphere sampling results (top row), the images exhibit high levels of noise due to the random selection of sample directions, many of which do not contribute effectively to lighting. Additionally, the bench scene is entirely black because uniform sampling fails to capture point light sources, which require targeted sampling. In contrast, the importance sampling results (bottom row) are significantly cleaner, with less noise and better-defined shadows, as more samples are concentrated in relevant light directions. The bench scene is also correctly illuminated, demonstrating the effectiveness of light sampling in handling point lights. This comparison clearly illustrates that importance sampling leads to higher-quality renderings.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-4-global-illumination&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 4: Global Illumination&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-4-global-illumination&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we implemented the feature that calculates the bounces of lights.&lt;/p&gt;&#xA;&lt;h3 id=&#34;sampling-with-diffuse-bsdf&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Sampling with Diffuse BSDF&lt;/span&gt;&#xA;  &lt;a href=&#34;#sampling-with-diffuse-bsdf&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;To implement the sample function of diffuse BSDF, we only need to plug the reflectance into the formula. We attatch the code, which should be self-explanatory.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DiffuseBSDF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sampler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//cosine weighted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;global-illumination-with-n-bounces&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Global Illumination with N bounces&lt;/span&gt;&#xA;  &lt;a href=&#34;#global-illumination-with-n-bounces&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;The function, &lt;code&gt;at_least_one_bounce_radiance&lt;/code&gt;, computes indirect lighting in a path tracer by recursively tracing bounces of light. We first constructs an orthonormal coordinate system (&lt;code&gt;o2w&lt;/code&gt;) based on the surface normal and converts the world-space outgoing direction to local space.&lt;/p&gt;&#xA;&lt;p&gt;The intersection point is calculated, and if the ray has reached the maximum depth, we can returns direct lighting (&lt;code&gt;one_bounce_radiance&lt;/code&gt;). Otherwise, it samples a new incoming direction (&lt;code&gt;wi&lt;/code&gt;) using the BSDF and transforms it into world space. If the probability density (&lt;code&gt;pdf&lt;/code&gt;) is too small, it returns either direct lighting or zero, depending on &lt;code&gt;isAccumBounces&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A new bounce ray is then generated and traced into the scene. If no new intersection is found, we can returns either direct lighting or zero. Otherwise, we recursively computes the indirect lighting from the next intersection. The final radiance is scaled by the BSDF value, the cosine term, and the probability density. If &lt;code&gt;isAccumBounces&lt;/code&gt; is true, direct lighting is added before returning the result.&lt;/p&gt;&#xA;&lt;h3 id=&#34;russian-roulette-termination&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Russian Roulette termination&lt;/span&gt;&#xA;  &lt;a href=&#34;#russian-roulette-termination&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;To ensure an unbiased estimation, we used russian roulette termination. Russian Roulette is a technique we use in path tracing to probabilistically terminate rays and reduce computation while maintaining an unbiased estimate of radiance. Instead of following every ray indefinitely, we randomly decide whether to terminate a path or continue tracing it based on a termination probability.When a ray reaches a certain depth, we flip a weighted coin with a probability &lt;code&gt;terminate_prob&lt;/code&gt;. If the coin flip indicates termination, we stop tracing the path. However, if the ray continues, we compensate for the potential loss of energy by scaling the contribution of the remaining paths by $ \frac{1}{1 - \text{terminateProb}} $. This ensures that the average radiance remains unbiased despite some paths being cut short.&lt;/p&gt;&#xA;&lt;p&gt;By using Russian Roulette, we prevent unnecessary calculations for rays that contribute little to the final image while ensuring that important light paths are still accounted for. This helps balance efficiency and accuracy in rendering.&lt;/p&gt;&#xA;&lt;h3 id=&#34;results-2&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results-2&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Here are some results rendered with global illumination.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;CBSpheres&lt;/th&gt;&#xA;          &lt;th&gt;Dragon&lt;/th&gt;&#xA;          &lt;th&gt;Bunny&lt;/th&gt;&#xA;          &lt;th&gt;CBbunny&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_CBspheres_lambertian.png&#34; alt=&#34;Part4_showoff_CBspheres_lambertian&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_CBspheres_lambertian.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_CBspheres_lambertian.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_CBspheres_lambertian.png?size=large 2x&#34; data-title=&#34;Part4_showoff_CBspheres_lambertian&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_dragon.png&#34; alt=&#34;Part4_showoff_dragon&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_dragon.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_dragon.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_dragon.png?size=large 2x&#34; data-title=&#34;Part4_showoff_dragon&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_bunny.png&#34; alt=&#34;Part4_showoff_bunny&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_bunny.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_bunny.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_showoff_bunny.png?size=large 2x&#34; data-title=&#34;Part4_showoff_bunny&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_100.png&#34; alt=&#34;Part4_comp_bunny_rr_m_100&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_100.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_100.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_100.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_100&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Here are some comparisonw with only direct and only indirect illumination.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBbunny.png&#34; alt=&#34;Part4_direct_CBbunny&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBbunny.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBbunny.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBbunny.png?size=large 2x&#34; data-title=&#34;Part4_direct_CBbunny&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_dragon.png&#34; alt=&#34;Part4_direct_dragon&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_dragon.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_dragon.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_dragon.png?size=large 2x&#34; data-title=&#34;Part4_direct_dragon&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBspheres_lambertian.png&#34; alt=&#34;Part4_direct_CBspheres_lambertian&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBspheres_lambertian.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBspheres_lambertian.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_CBspheres_lambertian.png?size=large 2x&#34; data-title=&#34;Part4_direct_CBspheres_lambertian&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_bench.png&#34; alt=&#34;Part4_direct_bench&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_bench.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_bench.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_direct_bench.png?size=large 2x&#34; data-title=&#34;Part4_direct_bench&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBbunny-1972253.png&#34; alt=&#34;Part4_indirect_CBbunny&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBbunny-1972253.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBbunny-1972253.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBbunny-1972253.png?size=large 2x&#34; data-title=&#34;Part4_indirect_CBbunny&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_dragon.png&#34; alt=&#34;Part4_indirect_dragon&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_dragon.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_dragon.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_dragon.png?size=large 2x&#34; data-title=&#34;Part4_indirect_dragon&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBspheres_lambertian.png&#34; alt=&#34;Part4_indirect_CBspheres_lambertian&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBspheres_lambertian.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBspheres_lambertian.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_CBspheres_lambertian.png?size=large 2x&#34; data-title=&#34;Part4_indirect_CBspheres_lambertian&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_bench.png&#34; alt=&#34;Part4_indirect_bench&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_bench.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_bench.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_indirect_bench.png?size=large 2x&#34; data-title=&#34;Part4_indirect_bench&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;em&gt;CBbunny.dae&lt;/em&gt; with different rendering bounces.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;isAccumBounces&lt;/th&gt;&#xA;          &lt;th&gt;0&lt;/th&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;2&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;False&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_0.png&#34; alt=&#34;Part4_bunny_o_0_m_0&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_0.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_0.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_0.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_0&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_1.png&#34; alt=&#34;Part4_bunny_o_0_m_1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_1.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_1.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_1&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_2.png&#34; alt=&#34;Part4_bunny_o_0_m_2&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_2.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_2.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_2&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;True&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_0.png&#34; alt=&#34;Part4_bunny_o_1_m_0&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_0.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_0.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_0.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_0&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_1.png&#34; alt=&#34;Part4_bunny_o_1_m_1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_1.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_1.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_1&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_2.png&#34; alt=&#34;Part4_bunny_o_1_m_2&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_2.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_2.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_2&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;isAccumBounces&lt;/th&gt;&#xA;          &lt;th&gt;3&lt;/th&gt;&#xA;          &lt;th&gt;4&lt;/th&gt;&#xA;          &lt;th&gt;5&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;False&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_3.png&#34; alt=&#34;Part4_bunny_o_0_m_3&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_3.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_3.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_3&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_4.png&#34; alt=&#34;Part4_bunny_o_0_m_4&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_4.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_4.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_4&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_5.png&#34; alt=&#34;Part4_bunny_o_0_m_5&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_5.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_0_m_5.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_0_m_5&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;True&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_3.png&#34; alt=&#34;Part4_bunny_o_1_m_3&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_3.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_3.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_3&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_4.png&#34; alt=&#34;Part4_bunny_o_1_m_4&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_4.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_4.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_4&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_5.png&#34; alt=&#34;Part4_bunny_o_1_m_5&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_5.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_5.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_bunny_o_1_m_5.png?size=large 2x&#34; data-title=&#34;Part4_bunny_o_1_m_5&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;Russian Roulette with max_ray_depth&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Max_ray_depth&lt;/th&gt;&#xA;          &lt;th&gt;0&lt;/th&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;2&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Result&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_0.png&#34; alt=&#34;Part4_comp_bunny_rr_m_0&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_0.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_0.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_bunny_rr_m_0.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_0&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_1.png&#34; alt=&#34;Part4_comp_bunny_rr_m_1&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_1.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_1.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_1&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_2.png&#34; alt=&#34;Part4_comp_bunny_rr_m_2&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_2.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_2.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_2&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Max_ray_depth&lt;/th&gt;&#xA;          &lt;th&gt;3&lt;/th&gt;&#xA;          &lt;th&gt;4&lt;/th&gt;&#xA;          &lt;th&gt;100&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Result&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_3.png&#34; alt=&#34;Part4_comp_bunny_rr_m_3&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_3.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_3.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_3&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_4.png&#34; alt=&#34;Part4_comp_bunny_rr_m_4&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_4.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_4.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_4&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_100.png&#34; alt=&#34;Part4_comp_bunny_rr_m_100&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_100.png?size=small, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_100.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw3/index.assets/Part4_comp_bunny_rr_m_100.png?size=large 2x&#34; data-title=&#34;Part4_comp_bunny_rr_m_100&#34; style=&#34;--width: 480px;--aspect-ratio: 480 / 360;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;sample-per-pixel rates&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;2&lt;/th&gt;&#xA;          &lt;th&gt;4&lt;/th&gt;&#xA;          &lt;th&gt;8&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1.png&#34; alt=&#34;Part4_comp_walle_ss_s_1&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_1&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_2.png&#34; alt=&#34;Part4_comp_walle_ss_s_2&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_2.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_2&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_4.png&#34; alt=&#34;Part4_comp_walle_ss_s_4&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_4.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_4.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_4.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_4&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png&#34; alt=&#34;Part4_comp_walle_ss_s_8&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_8&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;8&lt;/th&gt;&#xA;          &lt;th&gt;16&lt;/th&gt;&#xA;          &lt;th&gt;64&lt;/th&gt;&#xA;          &lt;th&gt;1024&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png&#34; alt=&#34;Part4_comp_walle_ss_s_8&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_8.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_8&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_16.png&#34; alt=&#34;Part4_comp_walle_ss_s_16&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_16.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_16.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_16.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_16&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_64.png&#34; alt=&#34;Part4_comp_walle_ss_s_64&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_64.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_64.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_64.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_64&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1024.png&#34; alt=&#34;Part4_comp_walle_ss_s_1024&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1024.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1024.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart4_comp_walle_ss_s_1024.png?size=large 2x&#34; data-title=&#34;Part4_comp_walle_ss_s_1024&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;part-5-adaptive-sampling&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 5 Adaptive Sampling&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-5-adaptive-sampling&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Instead of using a fixed number of samples for all pixels, we adjust the sampling count depending on how quickly the pixel’s estimated radiance stabilizes, improving efficiency without sacrificing image quality.&lt;/p&gt;&#xA;&lt;p&gt;In implementation, we start by tracing a set number of rays per pixel (&lt;code&gt;ns_aa&lt;/code&gt;), accumulating their radiance values. After every &lt;code&gt;samplesPerBatch&lt;/code&gt; samples, we compute the mean and variance of the accumulated illuminance. The variance helps us determine if the pixel&amp;rsquo;s radiance estimate has converged. We then calculate a confidence interval (&lt;code&gt;I&lt;/code&gt;) using a 95% confidence level, which tells us how much uncertainty remains in our estimate.&lt;/p&gt;&#xA;&lt;p&gt;If the confidence interval &lt;code&gt;I&lt;/code&gt; is within &lt;code&gt;maxTolerance&lt;/code&gt; of the mean, we assume the pixel&amp;rsquo;s radiance has stabilized and stop taking more samples, saving computation. Otherwise, we continue sampling until reaching the maximum allowed samples. This adaptive approach ensures that smooth areas of the image converge quickly, while more complex regions with high variance receive more samples to reduce noise. Finally, we update the sample count buffer and store the averaged radiance in the pixel buffer.&lt;/p&gt;&#xA;&lt;h3 id=&#34;results-3&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Results&lt;/span&gt;&#xA;  &lt;a href=&#34;#results-3&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Bench&lt;/th&gt;&#xA;          &lt;th&gt;Bunny&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench_rate.png&#34; alt=&#34;Part5_bench_rate&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench_rate.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench_rate.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench_rate.png?size=large 2x&#34; data-title=&#34;Part5_bench_rate&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny_rate.png&#34; alt=&#34;Part5_bunny_rate&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny_rate.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny_rate.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny_rate.png?size=large 2x&#34; data-title=&#34;Part5_bunny_rate&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench.png&#34; alt=&#34;Part5_bench&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bench.png?size=large 2x&#34; data-title=&#34;Part5_bench&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny.png&#34; alt=&#34;Part5_bunny&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsPart5_bunny.png?size=large 2x&#34; data-title=&#34;Part5_bunny&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;</description>
    </item>
    <item>
      <title>CS184 HW2 Writeup</title>
      <link>http://localhost:1313/Blog/posts/189hw2/</link>
      <pubDate>Tue, 04 Mar 2025 00:05:27 -0800</pubDate>
      <guid>http://localhost:1313/Blog/posts/189hw2/</guid>
      <category domain="http://localhost:1313/Blog/categories/cs184/">CS184</category>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://alexdwastaken.github.io/Blog/posts/189hw2/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://alexdwastaken.github.io/Blog/posts/189hw2/&lt;/a&gt;&#xA;&lt;strong&gt;Group members: Phoenix Ye, Xize Duan&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;overview&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Overview&lt;/span&gt;&#xA;  &lt;a href=&#34;#overview&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this project, we implemented Bezier curves and surfaces using the de Casteljau algorithm, allowing us to evaluate curves through recursive interpolation and extend this approach to surfaces.&#xA;We also worked with triangle meshes using the half-edge data structure, computing smooth vertex normals for improved shading.&#xA;Additionally, we implemented edge flipping and splitting to modify mesh topology while maintaining connectivity.&#xA;Finally, we applied Loop subdivision to refine meshes, achieving smoother and higher-resolution results. Through this project, we gained a deeper understanding of geometric modeling, mesh operations,&#xA;and the importance of efficient data structures in computer graphics. The final results successfully demonstrate smooth curve generation, surface evaluation, and mesh refinement, with visually improved models and correct algorithmic implementations.&lt;/p&gt;&#xA;&lt;h2 id=&#34;section-i-bezier-curves-and-surfaces&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Section I: Bezier Curves and Surfaces&lt;/span&gt;&#xA;  &lt;a href=&#34;#section-i-bezier-curves-and-surfaces&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;part-1-bezier-curves-with-1d-de-casteljau-subdivision&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 1: Bezier Curves with 1D de Casteljau Subdivision&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-1-bezier-curves-with-1d-de-casteljau-subdivision&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;This part requires to implement the de Casteljau algorithm for computing a point on a Bezier curve. Given a set of 2D control points and a scalar parameter &lt;code&gt;t&lt;/code&gt; (with &lt;code&gt;0 ≤ t ≤ 1&lt;/code&gt;), we recursively interpolate between adjacent control points until converging to a single point on the curve. The GUI allows stepping through each iteration to display the intermediate control points, and the final converged point will be clearly highlighted.&lt;/p&gt;&#xA;&lt;p&gt;In this part, we implemented the function &lt;code&gt;BezierCurve::evaluateStep&lt;/code&gt;, which:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reserves space for a new vector of points.&lt;/li&gt;&#xA;&lt;li&gt;Iterates through the input control points, performing linear interpolation for each pair using the formula:&#xA;$\mathbf{p}&amp;rsquo;_i = (1-t),\mathbf{p}_i + t,\mathbf{p} _{i+1}$&lt;/li&gt;&#xA;&lt;li&gt;Returns the resulting vector of interpolated points.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By repeatedly calling &lt;code&gt;evaluateStep&lt;/code&gt;, the algorithm gradually reduces the number of points until only one point remains, which is the evaluated point on the Bezier curve.&lt;/p&gt;&#xA;&lt;p&gt;The following screenshots show the progression of the de Casteljau algorithm on our own Bezier curve. Screenshot 1-6 shows the original Bezier Curve and the curve after 1-5 iterations. The last screenshot shows the De Casteljau algorithm operating on a list of slightly moved points and a modified t value.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.1.png&#34; alt=&#34;Initial Control Points&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.1.png?size=large 2x&#34; data-title=&#34;Initial Control Points&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Initial Control Points&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.2.png&#34; alt=&#34;First Iteration&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.2.png?size=large 2x&#34; data-title=&#34;First Iteration&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;First Iteration&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.3.png&#34; alt=&#34;Second Iteration&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.3.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.3.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.3.png?size=large 2x&#34; data-title=&#34;Second Iteration&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Second Iteration&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.4.png&#34; alt=&#34;Third Iteration&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.4.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.4.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.4.png?size=large 2x&#34; data-title=&#34;Third Iteration&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Third Iteration&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.5.png&#34; alt=&#34;Fourth Iteration&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.5.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.5.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart1.5.png?size=large 2x&#34; data-title=&#34;Fourth Iteration&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Fourth Iteration&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part1/part1.6.png&#34; alt=&#34;Final Convergence&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part1/part1.6.png?size=small, http://localhost:1313/Blog/posts/189hw2/part1/part1.6.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part1/part1.6.png?size=large 2x&#34; data-title=&#34;Final Convergence&#34; style=&#34;--width: 2144px;--aspect-ratio: 2144 / 1560;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Final Convergence&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part1/part1.7.png&#34; alt=&#34;part1.7&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part1/part1.7.png?size=small, http://localhost:1313/Blog/posts/189hw2/part1/part1.7.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part1/part1.7.png?size=large 2x&#34; data-title=&#34;part1.7&#34; style=&#34;--width: 2144px;--aspect-ratio: 2144 / 1560;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Modified Curve&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-2-bezier-surfaces-with-separable-1d-de-casteljau&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 2: Bezier surfaces with separable 1D de Casteljau&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-2-bezier-surfaces-with-separable-1d-de-casteljau&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we evaluate Bezier surfaces by extending the de Casteljau algorithm. Given two parameters, &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;, both of which fall within the range [0, 1]. Our objective is to calculate a point on the surface. To do this, each row of control points is first evaluated as a 1D Bezier curve using the parameter &lt;code&gt;u&lt;/code&gt;. The final point on the surface is then obtained by treating the resulting set of points as control points of another 1D Bezier curve that is evaluated with the value &lt;code&gt;v&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We implemented the solution in the &lt;code&gt;BezierPatch&lt;/code&gt; class by defining three key functions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;evaluateStep(points, t)&lt;/code&gt;&lt;/strong&gt;: This function takes a vector of 3D points and a scalar &lt;code&gt;t&lt;/code&gt; as input and returns a new vector of points, each computed by linearly interpolating between consecutive points using the formula&lt;br&gt;&#xA;$\mathbf{p}&amp;rsquo;_i = (1-t) \cdot \mathbf{p}_i + t \cdot \mathbf{p} _{i+1}.$&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;evaluate1D(points, t)&lt;/code&gt;&lt;/strong&gt;: This function recursively calls &lt;code&gt;evaluateStep&lt;/code&gt; on the vector of points until only one point remains. That single point is the evaluated point on the corresponding 1D Bezier curve.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;evaluate(u, v)&lt;/code&gt;&lt;/strong&gt;: To evaluate the surface, We first loop through each row of the 2D grid of control points and call &lt;code&gt;evaluate1D&lt;/code&gt; with the parameter &lt;code&gt;u&lt;/code&gt; to obtain an intermediate point for each row. Then, we form a new vector with these intermediate points and call &lt;code&gt;evaluate1D&lt;/code&gt; with the parameter &lt;code&gt;v&lt;/code&gt; to compute the final evaluated point on the surface.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following screenshot is the image of teapot.bez using Bezier Surfaces.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part2/part2.1.png&#34; alt=&#34;Evaluated Bezier Surface&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part2/part2.1.png?size=small, http://localhost:1313/Blog/posts/189hw2/part2/part2.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part2/part2.1.png?size=large 2x&#34; data-title=&#34;Evaluated Bezier Surface&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Evaluated Bezier Surface&lt;/p&gt;&#xA;&lt;h2 id=&#34;section-ii-triangle-meshes-and-half-edge-data-structure&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Section II: Triangle Meshes and Half-Edge Data Structure&lt;/span&gt;&#xA;  &lt;a href=&#34;#section-ii-triangle-meshes-and-half-edge-data-structure&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;part-3-area-weighted-vertex-normals&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 3: Area-Weighted Vertex Normals&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-3-area-weighted-vertex-normals&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 3, we are required to compute a smooth, unit normal at each vertex of a triangle mesh using the half-edge data structure. Instead of using flat shading (which uses a single face normal per triangle), we compute an area-weighted average of the normals of all faces incident to a vertex. This method is essential for achieving smooth Phong shading.&lt;/p&gt;&#xA;&lt;p&gt;Our implementation of &lt;code&gt;Vertex::normal()&lt;/code&gt; proceeds as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Initialize an accumulator vector (&lt;code&gt;accumNormal&lt;/code&gt;) to (0, 0, 0).&lt;/li&gt;&#xA;&lt;li&gt;Retrieve the vertex&amp;rsquo;s half-edge (using &lt;code&gt;halfedge()&lt;/code&gt;), which serves as the starting point for traversal.&lt;/li&gt;&#xA;&lt;li&gt;Loop over all incident faces by following the &lt;code&gt;twin()-&amp;gt;next()&lt;/code&gt; chain until we return to the starting half-edge.&lt;/li&gt;&#xA;&lt;li&gt;For each face (excluding those on a boundary), calculate its area using:&#xA;$\text{Area} = 0.5 \times | (p_1 - p_0) \times (p_2 - p_0) |$&#xA;where $( p_0 )$ is the position of the vertex, $( p_1 )$ and $( p_2 )$ are positions of the other two vertices of the face.&lt;/li&gt;&#xA;&lt;li&gt;Multiply the face&amp;rsquo;s normal by the computed area and add it to the accumulator.&lt;/li&gt;&#xA;&lt;li&gt;Finally, normalize the accumulated vector to produce the unit vertex normal.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following screenshots are images of teapot.dae with and without phong shading and without the wire framing.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.1.png&#34; alt=&#34;Flat Shading&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.1.png?size=small, http://localhost:1313/Blog/posts/189hw2/part3/part3.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part3/part3.1.png?size=large 2x&#34; data-title=&#34;Flat Shading&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Flat Shading&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.2.png&#34; alt=&#34;Phong Shading&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.2.png?size=small, http://localhost:1313/Blog/posts/189hw2/part3/part3.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part3/part3.2.png?size=large 2x&#34; data-title=&#34;Phong Shading&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Phone Shading&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.3.png&#34; alt=&#34;Without Wire&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part3/part3.3.png?size=small, http://localhost:1313/Blog/posts/189hw2/part3/part3.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part3/part3.3.png?size=large 2x&#34; data-title=&#34;Without Wire&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Without Wire&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-4-edge-flip&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 4: Edge Flip&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-4-edge-flip&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 4, we use the half-edge data structure to apply the &lt;strong&gt;edge flip&lt;/strong&gt; operation to a triangular mesh. When two adjacent triangles share an edge, the procedure &amp;ldquo;flips&amp;rdquo; that edge, substituting the other diagonal of the quadrilateral the two triangles make for the shared edge. When two triangles (a, b, c) and (c, b, d) share the edge (b, c), for instance, the flip swaps out this edge, creating the new triangles (a, d, c) and (a, b, d respectively).&lt;/p&gt;&#xA;&lt;p&gt;Our implementation of &lt;code&gt;HalfedgeMesh::flipEdge(...)&lt;/code&gt; follows these steps: First, the function checks if the given edge is a boundary edge. If it is, no flip is performed. Then, the algorithm collects all the relevant half-edges for the two adjacent triangles. After that, the core of the flip operation involves reassigning the pointers. Finally, since no new elements are created or removed, all pointer updates are local and done in constant time, ensuring the integrity of the mesh data structure.&lt;/p&gt;&#xA;&lt;p&gt;The following screenshots are Teapot Mesh before and after Edge Flip.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part4/part4.1.png&#34; alt=&#34;Without Flip&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part4/part4.1.png?size=small, http://localhost:1313/Blog/posts/189hw2/part4/part4.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part4/part4.1.png?size=large 2x&#34; data-title=&#34;Without Flip&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Without Flip&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part4/part4.2.png&#34; alt=&#34;With Flip&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part4/part4.2.png?size=small, http://localhost:1313/Blog/posts/189hw2/part4/part4.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part4/part4.2.png?size=large 2x&#34; data-title=&#34;With Flip&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;With Some Flips&lt;/p&gt;&#xA;&lt;h3 id=&#34;debug-journey&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Debug Journey&lt;/span&gt;&#xA;  &lt;a href=&#34;#debug-journey&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;During the implementation, We encountered an issue where flipping an edge twice sometimes created a hole in the mesh. To resolve this, we first sketched the local configuration of the two triangles on paper, labeling all half-edges, vertices, and faces. Then we employed provided debugging macros (like &lt;code&gt;CHECK_VERTEX&lt;/code&gt; and &lt;code&gt;CHECK_CLOSED&lt;/code&gt;) to ensure that, after the flip, all pointers correctly pointed to the expected elements. So after the corrections, the edge flip operation consistently maintained mesh integrity even after multiple flips, as verified by both visual inspection and debug checks.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-5-edge-split&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 5: Edge Split&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-5-edge-split&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In Part 5, we implement an edge split operation using the half-edge data structures. Our implementation of &lt;code&gt;HalfedgeMesh::splitEdge(...)&lt;/code&gt; proceeds as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The function first checks if the target edge is a boundary edge. If it is, the operation is skipped.&lt;/li&gt;&#xA;&lt;li&gt;The method retrieves the necessary local elements:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The half-edge corresponding to the edge and its neighboring half-edges from both adjacent triangles.&lt;/li&gt;&#xA;&lt;li&gt;The vertices at the endpoints of the edge, as well as the vertices opposite to the edge in each triangle.&lt;/li&gt;&#xA;&lt;li&gt;The edges and faces associated with these half-edges.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;New half-edges, edges, and faces are created to accommodate the split. A new vertex is generated and its position is computed as the midpoint of the original edge.&lt;/li&gt;&#xA;&lt;li&gt;The function carefully reassigns the pointers for the affected half-edges, vertices, edges, and faces so that the original two triangles are subdivided into four well-connected triangles. This ensures that the connectivity and integrity of the mesh remain intact after the split.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following Screenshots are a mesh before and after some edge splits, and a mesh before and after a combination of both edge splits and edge flips.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.1.png&#34; alt=&#34;Without Splits&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.1.png?size=small, http://localhost:1313/Blog/posts/189hw2/part5/part5.1.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part5/part5.1.png?size=large 2x&#34; data-title=&#34;Without Splits&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Without Splits&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.2.png&#34; alt=&#34;With some Splits&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.2.png?size=small, http://localhost:1313/Blog/posts/189hw2/part5/part5.2.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part5/part5.2.png?size=large 2x&#34; data-title=&#34;With some Splits&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;With some Splits&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.3.png&#34; alt=&#34;Without Flips and Splits&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.3.png?size=small, http://localhost:1313/Blog/posts/189hw2/part5/part5.3.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part5/part5.3.png?size=large 2x&#34; data-title=&#34;Without Flips and Splits&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;Without Flips and Splits&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.4.png&#34; alt=&#34;With some Flips and Splits&#34; srcset=&#34;http://localhost:1313/Blog/posts/189hw2/part5/part5.4.png?size=small, http://localhost:1313/Blog/posts/189hw2/part5/part5.4.png?size=medium 1.5x, http://localhost:1313/Blog/posts/189hw2/part5/part5.4.png?size=large 2x&#34; data-title=&#34;With some Flips and Splits&#34; style=&#34;--width: 2056px;--aspect-ratio: 2056 / 1472;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&#xA;With some Flips and Splits&lt;/p&gt;&#xA;&lt;h3 id=&#34;debugging-journey&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Debugging Journey&lt;/span&gt;&#xA;  &lt;a href=&#34;#debugging-journey&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;During the development of the edge split operation, We encountered challenges related to pointer reassignments due to the increased number of new elements created. To debug: We drew detailed diagrams of the local neighborhood of the target edge, labeling each half-edge, vertex, and face. This helped me verify the correct reassignment of pointers. We repeatedly performed edge splits and then followed up with edge flips to test the robustness of the operation, ensuring that no holes or misconnected elements appeared in the mesh.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-6-loop-subdivision-for-mesh-upsampling&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Part 6: Loop Subdivision for Mesh Upsampling&lt;/span&gt;&#xA;  &lt;a href=&#34;#part-6-loop-subdivision-for-mesh-upsampling&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In this part, we upscale a coarse polygon mesh using Loop subdivision. The goal is to convert a low-resolution mesh into a higher-resolution one.&lt;/p&gt;&#xA;&lt;p&gt;My implementation follows these steps:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For every edge, We first set its &lt;code&gt;isNew&lt;/code&gt; flag to false. Then, we compute a new position for the midpoint:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use the weighted average formula $\frac{3}{8}(v_0+v_1) + \frac{1}{8}(v_2+v_3)$.&lt;/li&gt;&#xA;&lt;li&gt;Use the simple midpoint $0.5 \times (v_0 + v_1)$.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;For each vertex, if it is a boundary vertex, we gather its two boundary neighbors and update its new position using $0.75 \times \text{originalPos} + 0.125 \times (\text{neighbor1} + \text{neighbor2})$. Otherwise, for interior vertices, We sum the positions of all neighboring vertices (traversed via the half-edge loop), calculate a weight based on the vertex degree, and compute the new position accordingly.&lt;/li&gt;&#xA;&lt;li&gt;We then iterate over all original edges (those whose endpoints are not marked as new) and split each edge, assigning the precomputed midpoint as the new vertex position.&lt;/li&gt;&#xA;&lt;li&gt;After splitting, We process the edges again: if an edge is new and connects one new vertex with one old vertex, we flip it. This ensures that only the proper edges (depicted as blue in the assignment diagram) are flipped while preserving the original boundary of the subdivided triangles.&lt;/li&gt;&#xA;&lt;li&gt;Finally, all vertices are updated with their new positions, and the &lt;code&gt;isNew&lt;/code&gt; flags are reset.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;debugging-and-observations&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Debugging and Observations&lt;/span&gt;&#xA;  &lt;a href=&#34;#debugging-and-observations&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;During the development of the Loop subdivision:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We drew diagrams of local mesh configurations to carefully track the pointer reassignments during edge splits and flips.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Iterative testing was crucial—after each subdivision, we visually inspected the mesh to confirm that no holes or misconnected elements appeared.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Observations on Mesh Behavior:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;With each iteration, the mesh becomes significantly smoother as the coarse triangles are subdivided into finer ones.&lt;/li&gt;&#xA;&lt;li&gt;For meshes with boundaries, applying the adjusted weighting for boundary vertices helped maintain a more natural look along the edges.&lt;/li&gt;&#xA;&lt;li&gt;Initially sharp features tend to round off after subdivision.&lt;/li&gt;&#xA;&lt;li&gt;When testing on a cube (using &lt;code&gt;dae/cube.dae&lt;/code&gt;), we noticed that after several iterations the cube sometimes becomes slightly asymmetric. By pre-processing the cube (performing targeted edge flips and splits) to increase the number of triangles per face, the subdivision converged to a more symmetric shape.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Below are the screenshots documenting the progress of loop subdivision on three different models. Each set shows the mesh at 0 through 4 subdivisions, demonstrating how the mesh becomes smoother and more detailed with each iteration. We can compare the original one with the split, flip and collapse one.&lt;/p&gt;&#xA;&lt;h3 id=&#34;examples&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Examples&lt;/span&gt;&#xA;  &lt;a href=&#34;#examples&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;h4 id=&#34;torus-original&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Torus (Original)&lt;/span&gt;&#xA;  &lt;a href=&#34;#torus-original&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7381741116289_.pic.jpg&#34; alt=&#34;7381741116289_.pic&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7381741116289_.pic.jpg?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7381741116289_.pic.jpg?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7381741116289_.pic.jpg?size=large 2x&#34; data-title=&#34;7381741116289_.pic&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7391741116302_.pic.jpg&#34; alt=&#34;7391741116302_.pic&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7391741116302_.pic.jpg?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7391741116302_.pic.jpg?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7391741116302_.pic.jpg?size=large 2x&#34; data-title=&#34;7391741116302_.pic&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7401741116312_.pic.jpg&#34; alt=&#34;7401741116312_.pic&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7401741116312_.pic.jpg?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7401741116312_.pic.jpg?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7401741116312_.pic.jpg?size=large 2x&#34; data-title=&#34;7401741116312_.pic&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7411741116321_.pic.jpg&#34; alt=&#34;7411741116321_.pic&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7411741116321_.pic.jpg?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7411741116321_.pic.jpg?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/pics7411741116321_.pic.jpg?size=large 2x&#34; data-title=&#34;7411741116321_.pic&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;cube-original&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Cube (Original)&lt;/span&gt;&#xA;  &lt;a href=&#34;#cube-original&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.17%E2%80%AFAM.png&#34; alt=&#34;7381741116289_.pic&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.17%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.17%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.17%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;7381741116289_.pic&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.51%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-03-04 at 11.34.51 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.51%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.51%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.34.51%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-03-04 at 11.34.51 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.08%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-03-04 at 11.35.08 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.08%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.08%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.08%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-03-04 at 11.35.08 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.29%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-03-04 at 11.35.29 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.29%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.29%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-03-04%20at%2011.35.29%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-03-04 at 11.35.29 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;icosahedron-original&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Icosahedron (Original)&lt;/span&gt;&#xA;  &lt;a href=&#34;#icosahedron-original&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113936836.png&#34; alt=&#34;image-20250304113936836&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113936836.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113936836.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113936836.png?size=large 2x&#34; data-title=&#34;image-20250304113936836&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113949604.png&#34; alt=&#34;image-20250304113949604&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113949604.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113949604.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304113949604.png?size=large 2x&#34; data-title=&#34;image-20250304113949604&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114010997.png&#34; alt=&#34;image-20250304114010997&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114010997.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114010997.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114010997.png?size=large 2x&#34; data-title=&#34;image-20250304114010997&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114021704.png&#34; alt=&#34;image-20250304114021704&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114021704.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114021704.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250304114021704.png?size=large 2x&#34; data-title=&#34;image-20250304114021704&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;torus-edgecollapsedae&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Torus (edgeCollapse.dae)&lt;/span&gt;&#xA;  &lt;a href=&#34;#torus-edgecollapsedae&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.1.png&#34; alt=&#34;Torus - 0 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.1.png?size=large 2x&#34; data-title=&#34;Torus - 0 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.2.png&#34; alt=&#34;Torus - 1 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.2.png?size=large 2x&#34; data-title=&#34;Torus - 1 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.3.png&#34; alt=&#34;Torus - 2 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.3.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.3.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.3.png?size=large 2x&#34; data-title=&#34;Torus - 2 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.4.png&#34; alt=&#34;Torus - 3 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.4.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.4.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.4.png?size=large 2x&#34; data-title=&#34;Torus - 3 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;cube-edgeflipdae&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Cube (edgeFlip.dae)&lt;/span&gt;&#xA;  &lt;a href=&#34;#cube-edgeflipdae&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.6.png&#34; alt=&#34;Cube - 0 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.6.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.6.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.6.png?size=large 2x&#34; data-title=&#34;Cube - 0 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.7.png&#34; alt=&#34;Cube - 1 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.7.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.7.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.7.png?size=large 2x&#34; data-title=&#34;Cube - 1 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.8.png&#34; alt=&#34;Cube - 3 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.8.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.8.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.8.png?size=large 2x&#34; data-title=&#34;Cube - 3 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.9.png&#34; alt=&#34;Cube - 3 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.9.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.9.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.9.png?size=large 2x&#34; data-title=&#34;Cube - 3 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;icosahedron-edgesplitdae&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Icosahedron (edgeSplit.dae)&lt;/span&gt;&#xA;  &lt;a href=&#34;#icosahedron-edgesplitdae&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;0 iterations&lt;/th&gt;&#xA;          &lt;th&gt;1 iteration&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.11.png&#34; alt=&#34;Icosahedron - 0 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.11.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.11.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.11.png?size=large 2x&#34; data-title=&#34;Icosahedron - 0 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.12.png&#34; alt=&#34;Icosahedron - 1 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.12.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.12.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.12.png?size=large 2x&#34; data-title=&#34;Icosahedron - 1 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2 iterations&lt;/td&gt;&#xA;          &lt;td&gt;3 iterations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.13.png&#34; alt=&#34;Icosahedron - 2 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.13.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.13.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.13.png?size=large 2x&#34; data-title=&#34;Icosahedron - 2 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.14.png&#34; alt=&#34;Icosahedron - 3 Subdivision&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.14.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.14.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picspart6.14.png?size=large 2x&#34; data-title=&#34;Icosahedron - 3 Subdivision&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;appendix&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Appendix&lt;/span&gt;&#xA;  &lt;a href=&#34;#appendix&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In completing this assignment, we utilized ChatGPT O3-mini-high for language refinement, grammar correction, and structural adjustments. Additionally, we used it to improve the clarity of Markdown formatting to ensure better organization and readability.&lt;/p&gt;&#xA;&lt;p&gt;Through this process, we gained a deeper understanding of Markdown formatting, including how to use headers, lists, and emphasis for clearer structuring. Moreover, we improved my ability to concisely express ideas, making our writing more precise and polished.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>CS184 HW1 Writeup</title>
      <link>http://localhost:1313/Blog/posts/eeccd09/</link>
      <pubDate>Sat, 08 Feb 2025 00:05:27 -0800</pubDate>
      <guid>http://localhost:1313/Blog/posts/eeccd09/</guid>
      <category domain="http://localhost:1313/Blog/categories/cs184/">CS184</category>
      <description>&lt;h2 id=&#34;write-up-for-hw1&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Write up for HW1&lt;/span&gt;&#xA;  &lt;a href=&#34;#write-up-for-hw1&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Group members: Xize Duan, Phoenix Ye.&lt;/strong&gt;&#xA;&lt;strong&gt;Link to the page itself: &lt;a href=&#34;https://alexdwastaken.github.io/Blog/posts/eeccd09/index.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://alexdwastaken.github.io/Blog/posts/eeccd09/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;overview&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Overview&lt;/span&gt;&#xA;  &lt;a href=&#34;#overview&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Our project implemented core rasterization and texture mapping techniques.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For triangle rasterization, we used cross-product-based point-in-triangle tests with row-based optimization, improving render time from 0.0078s to 0.0067s.&lt;/li&gt;&#xA;&lt;li&gt;Supersampling was implemented by scaling coordinates by the square root of the sample rate and averaging down. We enabled shape manipulation through matrix-based transforms, demonstrated with animated exercising figures.&lt;/li&gt;&#xA;&lt;li&gt;Barycentric coordinates are calculated from distance ratios and can be intepreted as area ratios. It can be used to interpolate colors.&lt;/li&gt;&#xA;&lt;li&gt;For texture mapping, we implemented both nearest neighbor (fast but jagged) and bilinear sampling (smoother but slower).&lt;/li&gt;&#xA;&lt;li&gt;Level sampling with mipmaps addressed aliasing at different scales. Key challenges included optimizing rasterization, correct coordinate scaling for supersampling, and handling texture mapping edge cases.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-1&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 1&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-1&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;To rasterize a triangle, what we fisrt did is to perform a point-in-triangle test. The test is accomplished by performing a cross product $(p_1-p_0)\times (p_2-p_1) \cdot k$. If the result is negative, then the winding order is clockwise, otherwise counterclockwise. The final result will never be zero for a well-defined triangle.&#xA;We fisrt assume a counter-clockwise winding order.&#xA;Then the following is the condition for point inside triangle:&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;(y1 - y0) (x - x0) + (x1 - x0) (y - y0) \geq 0 \newline&#xA;(y2 - y1) (x - x1) + (x2 - x1) (y - y1) \geq 0 \newline&#xA;(y0 - y2) (x - x2) + (x0 - x2) (y - y2) \geq 0&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;If the winding order is clockwise, simply change the direction of the signs.&lt;/p&gt;&#xA;&lt;p&gt;The next thing we do is to enumerate across every row in the bounding box of the triangle, and color the pixel if the point inside the triangle. What we did to optimize this operation is that we keep track whether we have left the triangle. If we have left the triangle, then the rest of the picture on this row will never skip to the next row, so it is safe to escape to the next row.&lt;/p&gt;&#xA;&lt;p&gt;We timed the rendering time of the dragon picture. The naive method which we enumerated every pixel in the bounding box took around 0.0078 second on average, and the one which we kept track of whether we have left the triangle took 0.0067 second on average.&lt;/p&gt;&#xA;&lt;p&gt;Here is a png screenshot of &lt;code&gt;basic/test4.svg&lt;/code&gt; with the default viewing parameters and with the pixel inspector centered on an interesting part of the scene.&lt;/p&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.38.37%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-02-16 at 12.38.37 AM&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-2&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 2&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-2&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;In summary, the supersampling algorithm improves image quality by working in a higher-resolution space and then averaging down to the final image. The modifications sums up to three steps—using a larger sample buffer, scaling coordinates, and adding a resolve step.&lt;/p&gt;&#xA;&lt;p&gt;We changed the size of sample buffer each time. One subtle difference is that if the total image is supersampled by $n$, then its coordinate is only scaled by $\sqrt{n}$, which is crucial in correctly sample everything. During the sampling process, instead of marking an entire pixel as either inside or outside, we check multiple subpixel sample locations especially on edge places.. For example, when we supersample by a factor of 4, the coordinates are scaled by a factor of 2. We also modified the function that&amp;rsquo;s used to erase and rewrite sample buffer by a factor of $n$.&lt;/p&gt;&#xA;&lt;p&gt;For each triangle, we write this into a bigger version of the sample buffer. When finally writing the sampled image onto the frame buffer, we take average of the corresponding pixel values to resolve to the final value. By capturing more detail about how a primitive covers a pixel, supersampling reduces the jagged edges (aliasing) that would otherwise appear when a pixel’s single sample is forced into a binary decision.&lt;/p&gt;&#xA;&lt;p&gt;Below are two examples of the rendering results of &lt;code&gt;basic/test4.svg&lt;/code&gt; under different parameters.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Samplerate = 1&lt;/th&gt;&#xA;          &lt;th&gt;Samplerate = 4&lt;/th&gt;&#xA;          &lt;th&gt;Samplerate = 16&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1.png&#34; alt=&#34;Q2_1&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1.png?size=large 2x&#34; data-title=&#34;Q2_1&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4.png&#34; alt=&#34;Q2_4&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4.png?size=large 2x&#34; data-title=&#34;Q2_4&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16.png&#34; alt=&#34;Q2_16&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16.png?size=large 2x&#34; data-title=&#34;Q2_16&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Samplerate = 1&lt;/th&gt;&#xA;          &lt;th&gt;Samplerate = 4&lt;/th&gt;&#xA;          &lt;th&gt;Samplerate = 16&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1-2.png&#34; alt=&#34;Q2_1-2&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1-2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1-2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_1-2.png?size=large 2x&#34; data-title=&#34;Q2_1-2&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4-2.png&#34; alt=&#34;Q2_4-2&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4-2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4-2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_4-2.png?size=large 2x&#34; data-title=&#34;Q2_4-2&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16-2.png&#34; alt=&#34;Q2_16-2&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16-2.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16-2.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ2_16-2.png?size=large 2x&#34; data-title=&#34;Q2_16-2&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;We observed that, as the sample rate goes up, the thin angle becomes less sharp but more continuous, and better represents the &amp;ldquo;real&amp;rdquo; triangle. This is because a higher sample rate increases the resolution of the sampled data, allowing for a more accurate approximation of the true shape of the triangle. At lower sample rates, the sampled points are more sparsely distributed, leading to a jagged or stepped representation of sharp angles. As the sample rate increases, more points are captured along the edges, smoothing out the transitions and reducing aliasing effects, which results in a more continuous and precise representation of the original shape.&lt;/p&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-3&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 3&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-3&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;We implemented the transform functions by generating corresponding transform matrix. We altered the svg so that the little people is now doing exercies by stretching their arms.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-15%20at%2010.29.43%E2%80%AFPM.png&#34; alt=&#34;Screenshot 2025-02-15 at 10.29.43 PM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-15%20at%2010.29.43%E2%80%AFPM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-15%20at%2010.29.43%E2%80%AFPM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-15%20at%2010.29.43%E2%80%AFPM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-02-15 at 10.29.43 PM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/p&gt;&#xA;&lt;p&gt;The SVG file can be downloaded here. &lt;a href=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/my_robot.svg&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Q3_svg&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/my_robot.svg&#34; alt=&#34;Q3_svg&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/my_robot.svg?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/my_robot.svg?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/my_robot.svg?size=large 2x&#34; data-title=&#34;Q3_svg&#34; class=&#34;suffix-invalid suffix-invalid__small suffix-invalid__large&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/p&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-4&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 4&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-4&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;explanation&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Explanation&lt;/span&gt;&#xA;  &lt;a href=&#34;#explanation&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Barycentric coordinates are a way of describing a point&amp;rsquo;s position inside a triangle (or a higher-dimensional simplex) using weighted averages of the triangle’s vertices. Every point inside the triangle is represented by three numbers (weights), corresponding to the triangle&amp;rsquo;s vertices A, B, C. The berycentric coordinates can be intepreted as the ratio of the area of a small triangles with respect to the area of the full triangle. The closer P is to a vertex, the larger the corresponding subtriangle’s area, and thus the larger the associated barycentric coordinate. See the picture below for a detailed illustration.&lt;/p&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsimage-20250215224622798.png&#34; alt=&#34;image-20250215224622798&#34; style=&#34;zoom:33%;&#34; /&gt;&#xA;&lt;p&gt;Berycentric coordinates can effectively be used for intropolation. For a point with coordinates ($\lambda_A, \lambda_B, \lambda_C$), its color can be intepreted as ($\lambda_A \cdot c_A+ \lambda_B \cdot c_B +\lambda_C\cdot c_C$). See the picture below for a illustration of a triangle interpolated with berycentric coordinates. In real implementation though, we calculate the coordinates by calculating distance, which is more efficient.&lt;/p&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ4_demonestration.png&#34; alt=&#34;Q4_demonestration&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;h2 id=&#34;screenshot&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Screenshot&lt;/span&gt;&#xA;  &lt;a href=&#34;#screenshot&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Here is a png screenshot of &lt;code&gt;svg/basic/test7.svg&lt;/code&gt; with default viewing parameters and sample rate 1.&lt;/p&gt;&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ4_color_wheel.jpg&#34; alt=&#34;Q4_color_wheel&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-5&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 5&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-5&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;explanation-1&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Explanation&lt;/span&gt;&#xA;  &lt;a href=&#34;#explanation-1&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Pixel sampling is the process of determining the color of a pixel by fetching texture data from a texture map. When implementing texture mapping, I used pixel sampling to fetch the correct texel color based on texture coordinates (u,v), which are continuous values ranging from 0 to 1. The range of u, v needs to be converted to the actual coordinates of the mipmap, or otherwise we will be constantly sampling the (0, 0) pixel. My inplementation can be factorized into two steps: Frrstly, we mapped the (u, v) coordinates to the texture image’s pixel grid. After that, colors can be effectively fetched from the uv coordinates.&lt;/p&gt;&#xA;&lt;p&gt;Now we explain the difference of the two sample methods. The nearest method simply rounds the non-integer coordinates to the nearest integer values, while bilinear method interpolates color from the four nearest pixels. These can be formulated as follows:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Nearest Neighbor Sampling&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Convert (u, v) to texture space:&lt;br&gt;&#xA;$$&#xA;x = \text{round}(u \times \text{texture width})&#xA;$$&#xA;$$&#xA;y = \text{round}(v \times \text{texture height})&#xA;$$&lt;/li&gt;&#xA;&lt;li&gt;Fetch the texel at $(x, y)$.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bilinear Sampling&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Compute the surrounding texel indices and their fractional offsets:&lt;br&gt;&#xA;$$&#xA;x = u \times \text{texture width}, \quad y = v \times \text{texture height}&#xA;$$&#xA;$$&#xA;x_0 = \lfloor x \rfloor, \quad x_1 = x_0 + 1&#xA;$$&#xA;$$&#xA;y_0 = \lfloor y \rfloor, \quad y_1 = y_0 + 1&#xA;$$&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Retrieve the four texels at $(x_0, y_0)$, $(x_0, y_1)$, $(x_1, y_0)$, $(x_1, y_1)$.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Perform linear interpolation first along x, then along y.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;comparison&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Comparison&lt;/span&gt;&#xA;  &lt;a href=&#34;#comparison&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Here are the example renderings of different methods. Notice the gradient int the transition, how bilinear is more smooth, and how supersampling further enhances the render results. Also, nearest  sampling renders a little faster.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Nearest&lt;/th&gt;&#xA;          &lt;th&gt;Bilinear&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1 Sample&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_1.png&#34; alt=&#34;Q5_N_1&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_1.png?size=large 2x&#34; data-title=&#34;Q5_N_1&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_1.png&#34; alt=&#34;Q5_Bi_1&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_1.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_1.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_1.png?size=large 2x&#34; data-title=&#34;Q5_Bi_1&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;16 Samples&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_16.png&#34; alt=&#34;Q5_N_16&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_16.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_16.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_N_16.png?size=large 2x&#34; data-title=&#34;Q5_N_16&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_16.png&#34; alt=&#34;Q5_Bi_16&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_16.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_16.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Bi_16.png?size=large 2x&#34; data-title=&#34;Q5_Bi_16&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;In the following example, bilinear clearly defeats nearest. The color of nearest sampling has visible jaggies, while the bilinear methods is way more smooth.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Bilinear&lt;/th&gt;&#xA;          &lt;th&gt;Nearest&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_Bi.png&#34; alt=&#34;Q5_Comparison_Bi&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_Bi.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_Bi.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_Bi.png?size=large 2x&#34; data-title=&#34;Q5_Comparison_Bi&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_N.png&#34; alt=&#34;Q5_Comparison_N&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_N.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_N.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsQ5_Comparison_N.png?size=large 2x&#34; data-title=&#34;Q5_Comparison_N&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;relative-differences&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Relative Differences&lt;/span&gt;&#xA;  &lt;a href=&#34;#relative-differences&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;The difference of the two methods can be summed as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Nearest sampling is fast but produces rough, pixelated results.&lt;/li&gt;&#xA;&lt;li&gt;Bilinear sampling smooths textures but requires more computation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For better quality, bilinear sampling is preferred, especially when textures are scaled.&lt;/p&gt;&#xA;&lt;p&gt;There will be a large difference when textures are magnified or skewed, in which nearest sampling will result in jaggies; also when there are high-frequency details, nearest will cause aliasing and bilinear will be a little better. In general, bilinear filtering improves visual quality in cases of scaling and transformation, while nearest sampling retains sharp texel boundaries but can lead to noticeable artifacts.&lt;/p&gt;&#xA;&lt;div style=&#34;page-break-after: always;&#34;&gt;&lt;/div&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;question-6&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Question 6&lt;/span&gt;&#xA;  &lt;a href=&#34;#question-6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;explanation-2&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Explanation&lt;/span&gt;&#xA;  &lt;a href=&#34;#explanation-2&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Level sampling is a technique used in texture mapping to determine the appropriate level of detail (LOD) for a texture based on the screen-space size of the mapped surface. Instead of directly using a high-resolution texture for all cases (results in aliasing), level sampling selects a lower-resolution version of the texture when the object is far away or viewed at a sharp angle. This helps maintain visual quality and performance because it is equivalent to pre-apply a low-resolution box filter.&lt;/p&gt;&#xA;&lt;p&gt;The idea is to precompute multiple levels of a texture where each level is a downsampled version of the original texture. During rendering, the appropriate level is chosen based on how much the texture is being scaled or minified.&lt;/p&gt;&#xA;&lt;p&gt;Our realization can be broken down into three steps. Firstly, compute the correspodning mipmaps. Then, according to the transformation and scaling factor, chooes the mipmap to sample from. At last, we fetch the color from the correponding mipmaps.&lt;/p&gt;&#xA;&lt;h2 id=&#34;comparison-1&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Comparison&lt;/span&gt;&#xA;  &lt;a href=&#34;#comparison-1&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Here’s a comparison of the tradeoffs between different sampling methods.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Technique&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Memory Usage&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Antialiasing Power&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Pixel Sampling&lt;/td&gt;&#xA;          &lt;td&gt;Fast (samples one texture level at a time)&lt;/td&gt;&#xA;          &lt;td&gt;Low (only needs one texture fetch)&lt;/td&gt;&#xA;          &lt;td&gt;Low (prone to aliasing, especially at minified scales)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Level Sampling&lt;/td&gt;&#xA;          &lt;td&gt;Moderate (needs to compute LOD and may interpolate between MIP levels)&lt;/td&gt;&#xA;          &lt;td&gt;Moderate (requires multiple MIP map levels)&lt;/td&gt;&#xA;          &lt;td&gt;Good (reduces aliasing caused by minification)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Supersampling&lt;/td&gt;&#xA;          &lt;td&gt;Slow (increases rendering cost significantly)&lt;/td&gt;&#xA;          &lt;td&gt;High (multiple texture fetches per pixel)&lt;/td&gt;&#xA;          &lt;td&gt;Excellent (best at reducing jagged edges and flickering)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;To sum up, Pixel Sampling is the fastest and most memory-efficient but can introduce aliasing, especially at extreme minifications or magnifications; Level Sampling balances performance and quality by using precomputed MIP maps, reducing aliasing without a massive performance hit, and Supersampling provides the highest quality but at the cost of significant performance and memory usage.&lt;/p&gt;&#xA;&lt;h2 id=&#34;demonestration&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Demonestration&lt;/span&gt;&#xA;  &lt;a href=&#34;#demonestration&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Here is a set of comparison of for sampling methods where we mainly focused on antialiasing power with pixel inspector on the upper-right corner. (Photo credit: Armand Khoury from Unsplash).&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;P_NEAREST&lt;/th&gt;&#xA;          &lt;th&gt;P_LINEAR&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;L_ZERO&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.07%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-02-16 at 12.01.07 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.07%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.07%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.07%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-02-16 at 12.01.07 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.11%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-02-16 at 12.01.11 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.11%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.11%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.11%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-02-16 at 12.01.11 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;L_NEAREST&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.00%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-02-16 at 12.01.00 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.00%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.00%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.01.00%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-02-16 at 12.01.00 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.00.49%E2%80%AFAM.png&#34; alt=&#34;Screenshot 2025-02-16 at 12.00.49 AM&#34; srcset=&#34;https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.00.49%E2%80%AFAM.png?size=small, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.00.49%E2%80%AFAM.png?size=medium 1.5x, https://raw.githubusercontent.com/AlexDWasTaken/blog-pics/main/picsScreenshot%202025-02-16%20at%2012.00.49%E2%80%AFAM.png?size=large 2x&#34; data-title=&#34;Screenshot 2025-02-16 at 12.00.49 AM&#34; style=&#34;background: url(/Blog/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;</description>
    </item>
  </channel>
</rss>
